									
【合约开发工具层】									
    编写工具									
        不提供，任意编辑器都可以									
    编译工具 									
       √用wasm-cc、wasm-cpp工具链直接编   									
       √用cmake编译	
        问题									
           √ 合约中用到的自定义的方法是如何在wasm自动生成import的									
                引用头文件，头文件中的声明被引用到自动生成import         
    测试工具									
        不提供，私有网络或测试网络自行测试									
    部署工具									
        不提供，手动调用json_rpc接口部署	

    合约功能增强   
       √合约编写格式								
            支持合约代码用基于对象的方式编写
                所有合约继承contract类
            合约执行方法的分发									
                根据调用方法名分发到类中对应的方法									
        合约内置方法支持									
           √打印操作									
           √数据库操作									
            链相关的方法									
            加解密函数									
            哈希函数									
            随机函数									
            软浮点运算？？？   
        
        合约增强功能支持
            合约数据的存储和查询
                单索引
                    实现文件：table.hpp
                    √存储
                        √ 合约中用结构体容器来表示存储的数据，一个对象即为一条数据
                        √ 结构体容器和数据库映射的工具类
                                结构体容器的增删改查和数据库的操作进行映射
                                √ 增emplace
                                    删erase
                                √ 改modify
                                √ 查get
                            √ key存储的规则
                                wasm::pack(contract_name) + wasm::name(table_name) +  scope + primary_key
                                    其中scope的值为0
                多索引  
                    实现文件：index_table.hpp  
                    √ key存储的规则
                        主索引：
                            wasm::pack(contract_name) + wasm::name(table_name) +  scope + primary_key
                        次索引：
                            SECONDARY_KEY_PREFIX + wasm::name(table_name) + scope + index_type::name() + index_type::extract_secondary_key(obj)      								
                                其中：
                                    SECONDARY_KEY_PREFIX 为固定值15
                                    index_type::name()   为wasm::name(table_name)+index的次序
                            次索引仅支持唯一索引，若插入两个相同的次索引，则检索的结果为最后一次插入的数据
									
        									
									
【合约执行层】     									
    合约约束									
        合约文件大小限制:1M									
        abi内容大小限制:1M									
       √ 合约执行时间
            单合约执行时间限制:2s
                通过watchdog设置执行超时时间，超时后设置backend对象module的allocator.disable_code()
            多合约执行时间限制:2s*5		
        ？通过统计指令执行次数的方式来限制合约执行时间
            会增加合约执行的开销

       √ 合约分配内存限制
            单合约执行内存限制：1G
                合约申请最大的内存空间为1G，当合约执行完毕后回收所有合约中申请的内存空间
                最大内存申请空间的配置位置：vm/constants.hpp::max_memory
            多合约执行内存限制：1G*5
                每个合约执行时会分配一个wasm_allocator，多合约调用限制为所有合约内存的加总

       √ 数据库空间资源大小的限制	
            单次执行合约数据库写入空间的限制：10M    
                在db_store写数据库的时候增加执行合约者的使用空间的大小,超过定义的大小之后，合约执行失败
                此种方法仅对单次执行合约时进行了限制，若多次执行合约，则靠手续费进行限制    
            数据库单条key的最大空间限制：1M
            数据库单条value的最大空间限制：1M
       √ 多合约调用的最深层次
            合约相互调用时最大的调用层数限制：5层      
    执行合约 									
       √ 创建合约执行上下文
            创建wasm_context对象，指定合约、合约abi、合约方法、方法参数、递归层数、合约执行者
                其中方法的参数会经过序列化的处理：json串-->json对象-->二进制流
             
       √ 执行流程
            调用wasm_context的execute方法进行合约的执行       
            读取合约二进制内容，并创建合约执行对象
            传入合约调用方法参数，调用eosvm的合约执行对象执行合约的apply方法
            apply方法中获取方法调用参数的二进制流
            根据合约方法参数的类型将二进制流反序列化成相应的参数
                调用datastream反序列化方法，将二进制流转化成tuple
                其中tuple中的每一项为调用合约方法的参数
            根据参数调用相应方法
            
       √ 获取返回值	
            返回值类型
                int64_t								
            什么情况下需要获取返回值									
                调用其他合约的时候									
       √ 合约方法的执行权限
            合约调用者在执行合约方法时要验证调用者的权限，无权限则不能执行。例如token合约的发行方法只能由合约的创建者调用
            权限验证策略：
                合约的调用者和合约的创建者一致

        并发执行
            如何在多线程中创建多个执行对象来并发的执行？

        执行时优化
            解析合约成module对象后，缓存下来避免合约的重复读取、解析

       ? 合约执行后的事件通知	

   √ 合约代码的相互调用并获取合约返回值
        实现方式									
            一：通过wasm_context上下文对象传递函数返回值
                特点：
                    caller和callee通过一段buff来传递返回值，返回的类型可以自己设置
                执行流程
                    1.caller合约中通过传入[合约地址、abi、调用方法、调用参数]调用call方法来进行调用callee合约
                    2.虚拟机中注册自定义的call方法来实现合约的调用逻辑
                        在call方法中创建callee wasm_context对象并执行callee合约
                    3.在callee合约中通过调用set_return(),来设置callee wasm_context的the_last_return_buffer    
                    4.caller的wasm_context获取callee的the_last_return_buffer    
                    5.caller合约中通过调用get_return()来获取callee的返回值
                        wasm_interface中get_return调用wasm_context::get_return来设置合约的的返回值为the_last_return_buffer    
            二：通过直接调用传递返回值
                特点：
                    返回值只支持int64_t
        所调用的合约地址如何得到
            应有一个入口列出链上现有的合约信息
                合约地址、合约功能、合约abi接口 
        									
        									
    合约内置方法									
        打印操作									
            打印各种类型的函数									
               √打印char *									
               √打印std::string									
                int类型									
                浮点类型									
        数据库操作									
           √合约对应的数据如何存储									
                数据库key的分配规则
                    合约名字+key									
            判断key是否存在数据									
           √读取数据									
           √写入数据									
            删除数据
           √增加事务的支持									
                操作失败自动回滚									
        链相关的方法									
            获取高度									
            获取余额									
        加解密函数									
        									
        哈希函数									
        									
        随机函数									
        									
       ？软浮点函数									
            wasm文件中导入了一系列的浮点操作函数wasm_interface中没有实现									
            添加softfloat软浮点库									
            内置方法的封装									

    【todo】
        合约并发执行


【合约逻辑层】									
    合约部署									
        流程									
            1.jsonrpc接口调用具体的合约部署方法									
                参数：wasm文件地址、abi文件地址									
                合约部署方法的内容主要是创建交易体																	
            2.创建交易体时把wasm合约和abi文件写入交易体中									
            3.广播签名																	
            4.建块时逻辑    									
                根据交易类型进行处理																		
            5.块写入数据库  																
                对合约和abi根据合约地址进行索引  								
									
    执行合约									
        流程									
            1.jsonrpc接口调用具体的合约执行方法									
                参数：合约地址、 合约方法、合约方法对应的参数									
                合约执行方法的内容就是创建执行合约的交易体  									
            2.创建交易体  																	
                将执行合约相关的参数写入相应的交易体	
            3.广播签名    
            4.创建块时逻辑									 									
                执行合约									
                    查找合约、abi文件									
                    读取合约方法、参数									
                    调用【合约执行层】执行合约,其中合约的执行者参数为交易的发起者									
            5.块写入数据库  									
        									
        问题：									
           ？保证同一高度多个块执行时的冲突									
									
    ？合约执行后的事件通知									
									
									
    更新合约									
        修改接口									
        添加接口									
        修改存储的数据结构									
            如何兼容之前的数据									
									
									
    删除合约									
        是否支持删除合约的功能									
									
    其他问题：									
       ？合约账户如何拥有资产									
            合约账户如不能拥有资产，则跟资产相关的合约无法实现									
       ？区块回滚
            1.部署合约类型									
                回滚合约部署时的费用									
                合约和abi在数据库中删除									
            2.执行合约类型									
                执行过的合约数据如何回滚									
        合约的权限问题									
            谁可以执行指定的合约    									
									
									
	其他jsonrpc接口								
        获取合约
            method：get_contract
            params：contract地址						
            result：合约的二进制内容						
        获取合约abi		
            method：get_contract_abi
            params：contract地址						
            result：合约的abi内容	        					
       √ 获取合约存储数据
            method：get_contract_data
            params：contract、table、primary							
            result：合约的table列表
            实现
                根据 合约地址 + table名 + primay 按前缀进行查询
                查找后的结果反序列化成相应的合约中的结构
                获取合约abi
                根据abi反序列化成json	
                若按次索引查询-->不支持				
									
【合约的开发】									
   √ hello world合约		
        文件：hello.wasm
        功能：
            传入string类型参数、int类型参数，并进行打印
   √ 数据库存取合约	
        文件：database.wasm
        功能：
            1.把指定数据存入数据库
            2.根据指定key从数据库中取出数据
   √ 合约table和数据库映射合约(单索引)
        文件：table_opt.wasm
        功能：
            合约table的增删改查和数据库的操作进行映射
                add_account
                    向数据库添加数据
                get_account
                    从数据库获取数据
   √ 合约table和数据库映射合约(多索引)
        文件：index.wasm
        功能：
            用带多个索引的index_table类模板支持数据增删改查
            根据主索引取数据
            根据次索引取数据

   √ 合约执行时间测试合约
        文件：print_per_second.wasm
        功能：
            合约功能为不停向屏幕输出，用于测试限制合约执行时间的功能,执行超过限制时间后合约停止

   √ 内存申请合约
        文件：alloc_mem.wasm
        功能：
            合约功能为调用malloc函数请求固定大小的内存10M，用于测试限制合约反复执行时是否有内存泄漏问题

   √ 返回值测试合约
        文件：return_value.wasm
        功能：
            合约内不同的方法返回不同类型的值，用于测试合约方法的返回值

   √ 调用其他合约的合约
        文件：call.wasm
        功能：
            在当前合约中调用return_value.wasm合约的方法,并获取返回值
   √ 递归调用合约
        文件：recursion_call.wasm
        功能：
            合约中通过call方法来递归的调用自己，测试递归情况下的合约执行时间
   √ 单次执行合约数据库最大开辟空间测试合约
        文件：database_limit.wasm    
        功能：
            合约中通过调用数据库写入方法，来写入执行大小的数据，用以测试合约单次最大写入数据库的数据量     
   √ token发行测试合约
        功能：实现发行token的功能
        合约方法：
            创建token
                create  (string issuer, string token_name, uint64_t maximum_supply);
            token数量增发
                issue( string issuer, string token_name, uint64_t quantity);
            token转账
                transfer(string from, string to, uint64_t quantity);


									
【Dapp的开发】									
    H5的简单的例子									
        投票例子									
        积分例子									
     									
【对应客户端的开发】									
    钱包对应的token转账的功能									
    token查询功能									
    Dapp对应的客户端									
    									
【区块浏览器】    									
    增加合约的类型									
    交易额计算方式									
    余额计算方式									
    合约相关的查看方式									
    									
									
【开发者文档】									
    节点部署									
    合约工具使用说明									
    合约代码样式，规范									
    合约部署									
    合约执行									
    合约相关接口说明									
