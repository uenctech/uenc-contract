// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca_test.proto

#include "ca_test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class CaTestInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CaTestInfoReq> _instance;
} _CaTestInfoReq_default_instance_;
class CaTestInfoAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CaTestInfoAck> _instance;
} _CaTestInfoAck_default_instance_;
static void InitDefaultsscc_info_CaTestInfoAck_ca_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CaTestInfoAck_default_instance_;
    new (ptr) ::CaTestInfoAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CaTestInfoAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CaTestInfoAck_ca_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CaTestInfoAck_ca_5ftest_2eproto}, {}};

static void InitDefaultsscc_info_CaTestInfoReq_ca_5ftest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CaTestInfoReq_default_instance_;
    new (ptr) ::CaTestInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CaTestInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CaTestInfoReq_ca_5ftest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CaTestInfoReq_ca_5ftest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ca_5ftest_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ca_5ftest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ca_5ftest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ca_5ftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CaTestInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CaTestInfoReq, test_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CaTestInfoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CaTestInfoAck, test_num_),
  PROTOBUF_FIELD_OFFSET(::CaTestInfoAck, json_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CaTestInfoReq)},
  { 6, -1, sizeof(::CaTestInfoAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CaTestInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CaTestInfoAck_default_instance_),
};

const char descriptor_table_protodef_ca_5ftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rca_test.proto\"!\n\rCaTestInfoReq\022\020\n\010test"
  "_num\030\001 \001(\r\"4\n\rCaTestInfoAck\022\020\n\010test_num\030"
  "\001 \001(\r\022\021\n\tjson_data\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ca_5ftest_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ca_5ftest_2eproto_sccs[2] = {
  &scc_info_CaTestInfoAck_ca_5ftest_2eproto.base,
  &scc_info_CaTestInfoReq_ca_5ftest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ca_5ftest_2eproto_once;
static bool descriptor_table_ca_5ftest_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ca_5ftest_2eproto = {
  &descriptor_table_ca_5ftest_2eproto_initialized, descriptor_table_protodef_ca_5ftest_2eproto, "ca_test.proto", 112,
  &descriptor_table_ca_5ftest_2eproto_once, descriptor_table_ca_5ftest_2eproto_sccs, descriptor_table_ca_5ftest_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ca_5ftest_2eproto::offsets,
  file_level_metadata_ca_5ftest_2eproto, 2, file_level_enum_descriptors_ca_5ftest_2eproto, file_level_service_descriptors_ca_5ftest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ca_5ftest_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ca_5ftest_2eproto), true);

// ===================================================================

void CaTestInfoReq::InitAsDefaultInstance() {
}
class CaTestInfoReq::_Internal {
 public:
};

CaTestInfoReq::CaTestInfoReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CaTestInfoReq)
}
CaTestInfoReq::CaTestInfoReq(const CaTestInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  test_num_ = from.test_num_;
  // @@protoc_insertion_point(copy_constructor:CaTestInfoReq)
}

void CaTestInfoReq::SharedCtor() {
  test_num_ = 0u;
}

CaTestInfoReq::~CaTestInfoReq() {
  // @@protoc_insertion_point(destructor:CaTestInfoReq)
  SharedDtor();
}

void CaTestInfoReq::SharedDtor() {
}

void CaTestInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaTestInfoReq& CaTestInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CaTestInfoReq_ca_5ftest_2eproto.base);
  return *internal_default_instance();
}


void CaTestInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CaTestInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_num_ = 0u;
  _internal_metadata_.Clear();
}

const char* CaTestInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 test_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CaTestInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CaTestInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 test_num = 1;
  if (this->test_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_test_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CaTestInfoReq)
  return target;
}

size_t CaTestInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CaTestInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 test_num = 1;
  if (this->test_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_test_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaTestInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CaTestInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CaTestInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CaTestInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CaTestInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CaTestInfoReq)
    MergeFrom(*source);
  }
}

void CaTestInfoReq::MergeFrom(const CaTestInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CaTestInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test_num() != 0) {
    _internal_set_test_num(from._internal_test_num());
  }
}

void CaTestInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CaTestInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaTestInfoReq::CopyFrom(const CaTestInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaTestInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaTestInfoReq::IsInitialized() const {
  return true;
}

void CaTestInfoReq::InternalSwap(CaTestInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(test_num_, other->test_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CaTestInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CaTestInfoAck::InitAsDefaultInstance() {
}
class CaTestInfoAck::_Internal {
 public:
};

CaTestInfoAck::CaTestInfoAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CaTestInfoAck)
}
CaTestInfoAck::CaTestInfoAck(const CaTestInfoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json_data().empty()) {
    json_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.json_data_);
  }
  test_num_ = from.test_num_;
  // @@protoc_insertion_point(copy_constructor:CaTestInfoAck)
}

void CaTestInfoAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CaTestInfoAck_ca_5ftest_2eproto.base);
  json_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_num_ = 0u;
}

CaTestInfoAck::~CaTestInfoAck() {
  // @@protoc_insertion_point(destructor:CaTestInfoAck)
  SharedDtor();
}

void CaTestInfoAck::SharedDtor() {
  json_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CaTestInfoAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaTestInfoAck& CaTestInfoAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CaTestInfoAck_ca_5ftest_2eproto.base);
  return *internal_default_instance();
}


void CaTestInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CaTestInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_num_ = 0u;
  _internal_metadata_.Clear();
}

const char* CaTestInfoAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 test_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string json_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_json_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CaTestInfoAck.json_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CaTestInfoAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CaTestInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 test_num = 1;
  if (this->test_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_test_num(), target);
  }

  // string json_data = 2;
  if (this->json_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_json_data().data(), static_cast<int>(this->_internal_json_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CaTestInfoAck.json_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CaTestInfoAck)
  return target;
}

size_t CaTestInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CaTestInfoAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string json_data = 2;
  if (this->json_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json_data());
  }

  // uint32 test_num = 1;
  if (this->test_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_test_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaTestInfoAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CaTestInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CaTestInfoAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CaTestInfoAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CaTestInfoAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CaTestInfoAck)
    MergeFrom(*source);
  }
}

void CaTestInfoAck::MergeFrom(const CaTestInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CaTestInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json_data().size() > 0) {

    json_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.json_data_);
  }
  if (from.test_num() != 0) {
    _internal_set_test_num(from._internal_test_num());
  }
}

void CaTestInfoAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CaTestInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaTestInfoAck::CopyFrom(const CaTestInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaTestInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaTestInfoAck::IsInitialized() const {
  return true;
}

void CaTestInfoAck::InternalSwap(CaTestInfoAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  json_data_.Swap(&other->json_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(test_num_, other->test_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CaTestInfoAck::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CaTestInfoReq* Arena::CreateMaybeMessage< ::CaTestInfoReq >(Arena* arena) {
  return Arena::CreateInternal< ::CaTestInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CaTestInfoAck* Arena::CreateMaybeMessage< ::CaTestInfoAck >(Arena* arena) {
  return Arena::CreateInternal< ::CaTestInfoAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
