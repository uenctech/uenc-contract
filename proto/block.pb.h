// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_block_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_block_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_block_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_block_2eproto;
class CBlock;
class CBlockDefaultTypeInternal;
extern CBlockDefaultTypeInternal _CBlock_default_instance_;
class CBlockHeader;
class CBlockHeaderDefaultTypeInternal;
extern CBlockHeaderDefaultTypeInternal _CBlockHeader_default_instance_;
class COwnerAddr;
class COwnerAddrDefaultTypeInternal;
extern COwnerAddrDefaultTypeInternal _COwnerAddr_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CBlock* Arena::CreateMaybeMessage<::CBlock>(Arena*);
template<> ::CBlockHeader* Arena::CreateMaybeMessage<::CBlockHeader>(Arena*);
template<> ::COwnerAddr* Arena::CreateMaybeMessage<::COwnerAddr>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class COwnerAddr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COwnerAddr) */ {
 public:
  COwnerAddr();
  virtual ~COwnerAddr();

  COwnerAddr(const COwnerAddr& from);
  COwnerAddr(COwnerAddr&& from) noexcept
    : COwnerAddr() {
    *this = ::std::move(from);
  }

  inline COwnerAddr& operator=(const COwnerAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline COwnerAddr& operator=(COwnerAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const COwnerAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const COwnerAddr* internal_default_instance() {
    return reinterpret_cast<const COwnerAddr*>(
               &_COwnerAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(COwnerAddr& a, COwnerAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(COwnerAddr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline COwnerAddr* New() const final {
    return CreateMaybeMessage<COwnerAddr>(nullptr);
  }

  COwnerAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<COwnerAddr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const COwnerAddr& from);
  void MergeFrom(const COwnerAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COwnerAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COwnerAddr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_block_2eproto);
    return ::descriptor_table_block_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxOwnerFieldNumber = 1,
    kNFieldNumber = 2,
  };
  // string txOwner = 1;
  void clear_txowner();
  const std::string& txowner() const;
  void set_txowner(const std::string& value);
  void set_txowner(std::string&& value);
  void set_txowner(const char* value);
  void set_txowner(const char* value, size_t size);
  std::string* mutable_txowner();
  std::string* release_txowner();
  void set_allocated_txowner(std::string* txowner);
  private:
  const std::string& _internal_txowner() const;
  void _internal_set_txowner(const std::string& value);
  std::string* _internal_mutable_txowner();
  public:

  // uint32 n = 2;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:COwnerAddr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txowner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class CBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBlock) */ {
 public:
  CBlock();
  virtual ~CBlock();

  CBlock(const CBlock& from);
  CBlock(CBlock&& from) noexcept
    : CBlock() {
    *this = ::std::move(from);
  }

  inline CBlock& operator=(const CBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBlock& operator=(CBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBlock* internal_default_instance() {
    return reinterpret_cast<const CBlock*>(
               &_CBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CBlock& a, CBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(CBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBlock* New() const final {
    return CreateMaybeMessage<CBlock>(nullptr);
  }

  CBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBlock& from);
  void MergeFrom(const CBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_block_2eproto);
    return ::descriptor_table_block_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 6,
    kAddressesFieldNumber = 7,
    kHashFieldNumber = 2,
    kPrevHashFieldNumber = 3,
    kMerkleRootFieldNumber = 5,
    kExtraFieldNumber = 8,
    kCommentFieldNumber = 9,
    kHeightFieldNumber = 4,
    kTimeFieldNumber = 10,
    kVersionFieldNumber = 1,
  };
  // repeated .CTransaction txs = 6;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  ::CTransaction* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >*
      mutable_txs();
  private:
  const ::CTransaction& _internal_txs(int index) const;
  ::CTransaction* _internal_add_txs();
  public:
  const ::CTransaction& txs(int index) const;
  ::CTransaction* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >&
      txs() const;

  // repeated .COwnerAddr addresses = 7;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::COwnerAddr* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COwnerAddr >*
      mutable_addresses();
  private:
  const ::COwnerAddr& _internal_addresses(int index) const;
  ::COwnerAddr* _internal_add_addresses();
  public:
  const ::COwnerAddr& addresses(int index) const;
  ::COwnerAddr* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COwnerAddr >&
      addresses() const;

  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string prevHash = 3;
  void clear_prevhash();
  const std::string& prevhash() const;
  void set_prevhash(const std::string& value);
  void set_prevhash(std::string&& value);
  void set_prevhash(const char* value);
  void set_prevhash(const char* value, size_t size);
  std::string* mutable_prevhash();
  std::string* release_prevhash();
  void set_allocated_prevhash(std::string* prevhash);
  private:
  const std::string& _internal_prevhash() const;
  void _internal_set_prevhash(const std::string& value);
  std::string* _internal_mutable_prevhash();
  public:

  // string merkleRoot = 5;
  void clear_merkleroot();
  const std::string& merkleroot() const;
  void set_merkleroot(const std::string& value);
  void set_merkleroot(std::string&& value);
  void set_merkleroot(const char* value);
  void set_merkleroot(const char* value, size_t size);
  std::string* mutable_merkleroot();
  std::string* release_merkleroot();
  void set_allocated_merkleroot(std::string* merkleroot);
  private:
  const std::string& _internal_merkleroot() const;
  void _internal_set_merkleroot(const std::string& value);
  std::string* _internal_mutable_merkleroot();
  public:

  // string extra = 8;
  void clear_extra();
  const std::string& extra() const;
  void set_extra(const std::string& value);
  void set_extra(std::string&& value);
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  std::string* mutable_extra();
  std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // string comment = 9;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // int64 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 time = 10;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction > txs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COwnerAddr > addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkleroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_block_2eproto;
};
// -------------------------------------------------------------------

class CBlockHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBlockHeader) */ {
 public:
  CBlockHeader();
  virtual ~CBlockHeader();

  CBlockHeader(const CBlockHeader& from);
  CBlockHeader(CBlockHeader&& from) noexcept
    : CBlockHeader() {
    *this = ::std::move(from);
  }

  inline CBlockHeader& operator=(const CBlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBlockHeader& operator=(CBlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CBlockHeader* internal_default_instance() {
    return reinterpret_cast<const CBlockHeader*>(
               &_CBlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CBlockHeader& a, CBlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CBlockHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBlockHeader* New() const final {
    return CreateMaybeMessage<CBlockHeader>(nullptr);
  }

  CBlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBlockHeader& from);
  void MergeFrom(const CBlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBlockHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_block_2eproto);
    return ::descriptor_table_block_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kPrevHashFieldNumber = 2,
    kHeightFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string prevHash = 2;
  void clear_prevhash();
  const std::string& prevhash() const;
  void set_prevhash(const std::string& value);
  void set_prevhash(std::string&& value);
  void set_prevhash(const char* value);
  void set_prevhash(const char* value, size_t size);
  std::string* mutable_prevhash();
  std::string* release_prevhash();
  void set_allocated_prevhash(std::string* prevhash);
  private:
  const std::string& _internal_prevhash() const;
  void _internal_set_prevhash(const std::string& value);
  std::string* _internal_mutable_prevhash();
  public:

  // int64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CBlockHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevhash_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// COwnerAddr

// string txOwner = 1;
inline void COwnerAddr::clear_txowner() {
  txowner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& COwnerAddr::txowner() const {
  // @@protoc_insertion_point(field_get:COwnerAddr.txOwner)
  return _internal_txowner();
}
inline void COwnerAddr::set_txowner(const std::string& value) {
  _internal_set_txowner(value);
  // @@protoc_insertion_point(field_set:COwnerAddr.txOwner)
}
inline std::string* COwnerAddr::mutable_txowner() {
  // @@protoc_insertion_point(field_mutable:COwnerAddr.txOwner)
  return _internal_mutable_txowner();
}
inline const std::string& COwnerAddr::_internal_txowner() const {
  return txowner_.GetNoArena();
}
inline void COwnerAddr::_internal_set_txowner(const std::string& value) {
  
  txowner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void COwnerAddr::set_txowner(std::string&& value) {
  
  txowner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:COwnerAddr.txOwner)
}
inline void COwnerAddr::set_txowner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txowner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:COwnerAddr.txOwner)
}
inline void COwnerAddr::set_txowner(const char* value, size_t size) {
  
  txowner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:COwnerAddr.txOwner)
}
inline std::string* COwnerAddr::_internal_mutable_txowner() {
  
  return txowner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* COwnerAddr::release_txowner() {
  // @@protoc_insertion_point(field_release:COwnerAddr.txOwner)
  
  return txowner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void COwnerAddr::set_allocated_txowner(std::string* txowner) {
  if (txowner != nullptr) {
    
  } else {
    
  }
  txowner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txowner);
  // @@protoc_insertion_point(field_set_allocated:COwnerAddr.txOwner)
}

// uint32 n = 2;
inline void COwnerAddr::clear_n() {
  n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 COwnerAddr::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 COwnerAddr::n() const {
  // @@protoc_insertion_point(field_get:COwnerAddr.n)
  return _internal_n();
}
inline void COwnerAddr::_internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_ = value;
}
inline void COwnerAddr::set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:COwnerAddr.n)
}

// -------------------------------------------------------------------

// CBlock

// uint32 version = 1;
inline void CBlock::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBlock::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBlock::version() const {
  // @@protoc_insertion_point(field_get:CBlock.version)
  return _internal_version();
}
inline void CBlock::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void CBlock::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CBlock.version)
}

// string hash = 2;
inline void CBlock::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBlock::hash() const {
  // @@protoc_insertion_point(field_get:CBlock.hash)
  return _internal_hash();
}
inline void CBlock::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:CBlock.hash)
}
inline std::string* CBlock::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:CBlock.hash)
  return _internal_mutable_hash();
}
inline const std::string& CBlock::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void CBlock::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBlock::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CBlock.hash)
}
inline void CBlock::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CBlock.hash)
}
inline void CBlock::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CBlock.hash)
}
inline std::string* CBlock::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBlock::release_hash() {
  // @@protoc_insertion_point(field_release:CBlock.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBlock::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:CBlock.hash)
}

// string prevHash = 3;
inline void CBlock::clear_prevhash() {
  prevhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBlock::prevhash() const {
  // @@protoc_insertion_point(field_get:CBlock.prevHash)
  return _internal_prevhash();
}
inline void CBlock::set_prevhash(const std::string& value) {
  _internal_set_prevhash(value);
  // @@protoc_insertion_point(field_set:CBlock.prevHash)
}
inline std::string* CBlock::mutable_prevhash() {
  // @@protoc_insertion_point(field_mutable:CBlock.prevHash)
  return _internal_mutable_prevhash();
}
inline const std::string& CBlock::_internal_prevhash() const {
  return prevhash_.GetNoArena();
}
inline void CBlock::_internal_set_prevhash(const std::string& value) {
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBlock::set_prevhash(std::string&& value) {
  
  prevhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CBlock.prevHash)
}
inline void CBlock::set_prevhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CBlock.prevHash)
}
inline void CBlock::set_prevhash(const char* value, size_t size) {
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CBlock.prevHash)
}
inline std::string* CBlock::_internal_mutable_prevhash() {
  
  return prevhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBlock::release_prevhash() {
  // @@protoc_insertion_point(field_release:CBlock.prevHash)
  
  return prevhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBlock::set_allocated_prevhash(std::string* prevhash) {
  if (prevhash != nullptr) {
    
  } else {
    
  }
  prevhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prevhash);
  // @@protoc_insertion_point(field_set_allocated:CBlock.prevHash)
}

// int64 height = 4;
inline void CBlock::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CBlock::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CBlock::height() const {
  // @@protoc_insertion_point(field_get:CBlock.height)
  return _internal_height();
}
inline void CBlock::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void CBlock::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CBlock.height)
}

// string merkleRoot = 5;
inline void CBlock::clear_merkleroot() {
  merkleroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBlock::merkleroot() const {
  // @@protoc_insertion_point(field_get:CBlock.merkleRoot)
  return _internal_merkleroot();
}
inline void CBlock::set_merkleroot(const std::string& value) {
  _internal_set_merkleroot(value);
  // @@protoc_insertion_point(field_set:CBlock.merkleRoot)
}
inline std::string* CBlock::mutable_merkleroot() {
  // @@protoc_insertion_point(field_mutable:CBlock.merkleRoot)
  return _internal_mutable_merkleroot();
}
inline const std::string& CBlock::_internal_merkleroot() const {
  return merkleroot_.GetNoArena();
}
inline void CBlock::_internal_set_merkleroot(const std::string& value) {
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBlock::set_merkleroot(std::string&& value) {
  
  merkleroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CBlock.merkleRoot)
}
inline void CBlock::set_merkleroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CBlock.merkleRoot)
}
inline void CBlock::set_merkleroot(const char* value, size_t size) {
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CBlock.merkleRoot)
}
inline std::string* CBlock::_internal_mutable_merkleroot() {
  
  return merkleroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBlock::release_merkleroot() {
  // @@protoc_insertion_point(field_release:CBlock.merkleRoot)
  
  return merkleroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBlock::set_allocated_merkleroot(std::string* merkleroot) {
  if (merkleroot != nullptr) {
    
  } else {
    
  }
  merkleroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merkleroot);
  // @@protoc_insertion_point(field_set_allocated:CBlock.merkleRoot)
}

// repeated .CTransaction txs = 6;
inline int CBlock::_internal_txs_size() const {
  return txs_.size();
}
inline int CBlock::txs_size() const {
  return _internal_txs_size();
}
inline ::CTransaction* CBlock::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:CBlock.txs)
  return txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >*
CBlock::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:CBlock.txs)
  return &txs_;
}
inline const ::CTransaction& CBlock::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const ::CTransaction& CBlock::txs(int index) const {
  // @@protoc_insertion_point(field_get:CBlock.txs)
  return _internal_txs(index);
}
inline ::CTransaction* CBlock::_internal_add_txs() {
  return txs_.Add();
}
inline ::CTransaction* CBlock::add_txs() {
  // @@protoc_insertion_point(field_add:CBlock.txs)
  return _internal_add_txs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTransaction >&
CBlock::txs() const {
  // @@protoc_insertion_point(field_list:CBlock.txs)
  return txs_;
}

// repeated .COwnerAddr addresses = 7;
inline int CBlock::_internal_addresses_size() const {
  return addresses_.size();
}
inline int CBlock::addresses_size() const {
  return _internal_addresses_size();
}
inline void CBlock::clear_addresses() {
  addresses_.Clear();
}
inline ::COwnerAddr* CBlock::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:CBlock.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COwnerAddr >*
CBlock::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:CBlock.addresses)
  return &addresses_;
}
inline const ::COwnerAddr& CBlock::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::COwnerAddr& CBlock::addresses(int index) const {
  // @@protoc_insertion_point(field_get:CBlock.addresses)
  return _internal_addresses(index);
}
inline ::COwnerAddr* CBlock::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::COwnerAddr* CBlock::add_addresses() {
  // @@protoc_insertion_point(field_add:CBlock.addresses)
  return _internal_add_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COwnerAddr >&
CBlock::addresses() const {
  // @@protoc_insertion_point(field_list:CBlock.addresses)
  return addresses_;
}

// string extra = 8;
inline void CBlock::clear_extra() {
  extra_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBlock::extra() const {
  // @@protoc_insertion_point(field_get:CBlock.extra)
  return _internal_extra();
}
inline void CBlock::set_extra(const std::string& value) {
  _internal_set_extra(value);
  // @@protoc_insertion_point(field_set:CBlock.extra)
}
inline std::string* CBlock::mutable_extra() {
  // @@protoc_insertion_point(field_mutable:CBlock.extra)
  return _internal_mutable_extra();
}
inline const std::string& CBlock::_internal_extra() const {
  return extra_.GetNoArena();
}
inline void CBlock::_internal_set_extra(const std::string& value) {
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBlock::set_extra(std::string&& value) {
  
  extra_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CBlock.extra)
}
inline void CBlock::set_extra(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CBlock.extra)
}
inline void CBlock::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CBlock.extra)
}
inline std::string* CBlock::_internal_mutable_extra() {
  
  return extra_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBlock::release_extra() {
  // @@protoc_insertion_point(field_release:CBlock.extra)
  
  return extra_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBlock::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:CBlock.extra)
}

// string comment = 9;
inline void CBlock::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBlock::comment() const {
  // @@protoc_insertion_point(field_get:CBlock.comment)
  return _internal_comment();
}
inline void CBlock::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:CBlock.comment)
}
inline std::string* CBlock::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:CBlock.comment)
  return _internal_mutable_comment();
}
inline const std::string& CBlock::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void CBlock::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBlock::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CBlock.comment)
}
inline void CBlock::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CBlock.comment)
}
inline void CBlock::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CBlock.comment)
}
inline std::string* CBlock::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBlock::release_comment() {
  // @@protoc_insertion_point(field_release:CBlock.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBlock::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:CBlock.comment)
}

// uint64 time = 10;
inline void CBlock::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CBlock::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CBlock::time() const {
  // @@protoc_insertion_point(field_get:CBlock.time)
  return _internal_time();
}
inline void CBlock::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void CBlock::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBlock.time)
}

// -------------------------------------------------------------------

// CBlockHeader

// string hash = 1;
inline void CBlockHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBlockHeader::hash() const {
  // @@protoc_insertion_point(field_get:CBlockHeader.hash)
  return _internal_hash();
}
inline void CBlockHeader::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:CBlockHeader.hash)
}
inline std::string* CBlockHeader::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:CBlockHeader.hash)
  return _internal_mutable_hash();
}
inline const std::string& CBlockHeader::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void CBlockHeader::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBlockHeader::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CBlockHeader.hash)
}
inline void CBlockHeader::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CBlockHeader.hash)
}
inline void CBlockHeader::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CBlockHeader.hash)
}
inline std::string* CBlockHeader::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBlockHeader::release_hash() {
  // @@protoc_insertion_point(field_release:CBlockHeader.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBlockHeader::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:CBlockHeader.hash)
}

// string prevHash = 2;
inline void CBlockHeader::clear_prevhash() {
  prevhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CBlockHeader::prevhash() const {
  // @@protoc_insertion_point(field_get:CBlockHeader.prevHash)
  return _internal_prevhash();
}
inline void CBlockHeader::set_prevhash(const std::string& value) {
  _internal_set_prevhash(value);
  // @@protoc_insertion_point(field_set:CBlockHeader.prevHash)
}
inline std::string* CBlockHeader::mutable_prevhash() {
  // @@protoc_insertion_point(field_mutable:CBlockHeader.prevHash)
  return _internal_mutable_prevhash();
}
inline const std::string& CBlockHeader::_internal_prevhash() const {
  return prevhash_.GetNoArena();
}
inline void CBlockHeader::_internal_set_prevhash(const std::string& value) {
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CBlockHeader::set_prevhash(std::string&& value) {
  
  prevhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CBlockHeader.prevHash)
}
inline void CBlockHeader::set_prevhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CBlockHeader.prevHash)
}
inline void CBlockHeader::set_prevhash(const char* value, size_t size) {
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CBlockHeader.prevHash)
}
inline std::string* CBlockHeader::_internal_mutable_prevhash() {
  
  return prevhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CBlockHeader::release_prevhash() {
  // @@protoc_insertion_point(field_release:CBlockHeader.prevHash)
  
  return prevhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CBlockHeader::set_allocated_prevhash(std::string* prevhash) {
  if (prevhash != nullptr) {
    
  } else {
    
  }
  prevhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prevhash);
  // @@protoc_insertion_point(field_set_allocated:CBlockHeader.prevHash)
}

// int64 height = 3;
inline void CBlockHeader::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CBlockHeader::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CBlockHeader::height() const {
  // @@protoc_insertion_point(field_get:CBlockHeader.height)
  return _internal_height();
}
inline void CBlockHeader::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void CBlockHeader::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CBlockHeader.height)
}

// uint64 time = 4;
inline void CBlockHeader::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CBlockHeader::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CBlockHeader::time() const {
  // @@protoc_insertion_point(field_get:CBlockHeader.time)
  return _internal_time();
}
inline void CBlockHeader::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void CBlockHeader::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBlockHeader.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_block_2eproto
