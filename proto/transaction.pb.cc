// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#include "transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CScriptSig_transaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSignPreHash_transaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CTxin_transaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTxout_transaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTxprevout_transaction_2eproto;
class CTxprevoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTxprevout> _instance;
} _CTxprevout_default_instance_;
class CScriptSigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CScriptSig> _instance;
} _CScriptSig_default_instance_;
class CTxinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTxin> _instance;
} _CTxin_default_instance_;
class CTxoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTxout> _instance;
} _CTxout_default_instance_;
class CSignPreHashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSignPreHash> _instance;
} _CSignPreHash_default_instance_;
class CTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTransaction> _instance;
} _CTransaction_default_instance_;
static void InitDefaultsscc_info_CScriptSig_transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CScriptSig_default_instance_;
    new (ptr) ::CScriptSig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CScriptSig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CScriptSig_transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CScriptSig_transaction_2eproto}, {}};

static void InitDefaultsscc_info_CSignPreHash_transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSignPreHash_default_instance_;
    new (ptr) ::CSignPreHash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSignPreHash::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSignPreHash_transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSignPreHash_transaction_2eproto}, {}};

static void InitDefaultsscc_info_CTransaction_transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CTransaction_default_instance_;
    new (ptr) ::CTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CTransaction_transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CTransaction_transaction_2eproto}, {
      &scc_info_CSignPreHash_transaction_2eproto.base,
      &scc_info_CTxin_transaction_2eproto.base,
      &scc_info_CTxout_transaction_2eproto.base,}};

static void InitDefaultsscc_info_CTxin_transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CTxin_default_instance_;
    new (ptr) ::CTxin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CTxin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CTxin_transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CTxin_transaction_2eproto}, {
      &scc_info_CTxprevout_transaction_2eproto.base,
      &scc_info_CScriptSig_transaction_2eproto.base,}};

static void InitDefaultsscc_info_CTxout_transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CTxout_default_instance_;
    new (ptr) ::CTxout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CTxout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTxout_transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CTxout_transaction_2eproto}, {}};

static void InitDefaultsscc_info_CTxprevout_transaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CTxprevout_default_instance_;
    new (ptr) ::CTxprevout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CTxprevout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTxprevout_transaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CTxprevout_transaction_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transaction_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transaction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTxprevout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTxprevout, hash_),
  PROTOBUF_FIELD_OFFSET(::CTxprevout, n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CScriptSig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CScriptSig, sign_),
  PROTOBUF_FIELD_OFFSET(::CScriptSig, pub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTxin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTxin, prevout_),
  PROTOBUF_FIELD_OFFSET(::CTxin, scriptsig_),
  PROTOBUF_FIELD_OFFSET(::CTxin, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTxout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTxout, value_),
  PROTOBUF_FIELD_OFFSET(::CTxout, scriptpubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSignPreHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSignPreHash, sign_),
  PROTOBUF_FIELD_OFFSET(::CSignPreHash, pub_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CTransaction, version_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, time_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, signprehash_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, owner_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, n_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, identity_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, hash_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, vin_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, vout_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, extra_),
  PROTOBUF_FIELD_OFFSET(::CTransaction, comment_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CTxprevout)},
  { 7, -1, sizeof(::CScriptSig)},
  { 14, -1, sizeof(::CTxin)},
  { 22, -1, sizeof(::CTxout)},
  { 29, -1, sizeof(::CSignPreHash)},
  { 36, -1, sizeof(::CTransaction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTxprevout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CScriptSig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTxin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTxout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSignPreHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CTransaction_default_instance_),
};

const char descriptor_table_protodef_transaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021transaction.proto\"%\n\nCTxprevout\022\014\n\004has"
  "h\030\001 \001(\t\022\t\n\001n\030\002 \001(\r\"\'\n\nCScriptSig\022\014\n\004sign"
  "\030\001 \001(\014\022\013\n\003pub\030\002 \001(\014\"W\n\005CTxin\022\034\n\007prevout\030"
  "\001 \001(\0132\013.CTxprevout\022\036\n\tscriptSig\030\002 \001(\0132\013."
  "CScriptSig\022\020\n\010sequence\030\003 \001(\r\"-\n\006CTxout\022\r"
  "\n\005value\030\001 \001(\003\022\024\n\014scriptPubKey\030\002 \001(\t\")\n\014C"
  "SignPreHash\022\014\n\004sign\030\001 \001(\014\022\013\n\003pub\030\002 \001(\014\"\327"
  "\001\n\014CTransaction\022\017\n\007version\030\001 \001(\r\022\014\n\004time"
  "\030\002 \001(\004\022\"\n\013signPreHash\030\003 \003(\0132\r.CSignPreHa"
  "sh\022\r\n\005owner\030\004 \001(\t\022\t\n\001n\030\005 \001(\r\022\020\n\010identity"
  "\030\006 \001(\t\022\014\n\004hash\030\007 \001(\t\022\023\n\003vin\030\010 \003(\0132\006.CTxi"
  "n\022\025\n\004vout\030\t \003(\0132\007.CTxout\022\r\n\005extra\030\n \001(\t\022"
  "\017\n\007comment\030\013 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transaction_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transaction_2eproto_sccs[6] = {
  &scc_info_CScriptSig_transaction_2eproto.base,
  &scc_info_CSignPreHash_transaction_2eproto.base,
  &scc_info_CTransaction_transaction_2eproto.base,
  &scc_info_CTxin_transaction_2eproto.base,
  &scc_info_CTxout_transaction_2eproto.base,
  &scc_info_CTxprevout_transaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transaction_2eproto_once;
static bool descriptor_table_transaction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_2eproto = {
  &descriptor_table_transaction_2eproto_initialized, descriptor_table_protodef_transaction_2eproto, "transaction.proto", 504,
  &descriptor_table_transaction_2eproto_once, descriptor_table_transaction_2eproto_sccs, descriptor_table_transaction_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_transaction_2eproto::offsets,
  file_level_metadata_transaction_2eproto, 6, file_level_enum_descriptors_transaction_2eproto, file_level_service_descriptors_transaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transaction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transaction_2eproto), true);

// ===================================================================

void CTxprevout::InitAsDefaultInstance() {
}
class CTxprevout::_Internal {
 public:
};

CTxprevout::CTxprevout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CTxprevout)
}
CTxprevout::CTxprevout(const CTxprevout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:CTxprevout)
}

void CTxprevout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CTxprevout_transaction_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_ = 0u;
}

CTxprevout::~CTxprevout() {
  // @@protoc_insertion_point(destructor:CTxprevout)
  SharedDtor();
}

void CTxprevout::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTxprevout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTxprevout& CTxprevout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTxprevout_transaction_2eproto.base);
  return *internal_default_instance();
}


void CTxprevout::Clear() {
// @@protoc_insertion_point(message_clear_start:CTxprevout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_ = 0u;
  _internal_metadata_.Clear();
}

const char* CTxprevout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTxprevout.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTxprevout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTxprevout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTxprevout.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // uint32 n = 2;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTxprevout)
  return target;
}

size_t CTxprevout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTxprevout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // uint32 n = 2;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTxprevout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTxprevout)
  GOOGLE_DCHECK_NE(&from, this);
  const CTxprevout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTxprevout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTxprevout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTxprevout)
    MergeFrom(*source);
  }
}

void CTxprevout::MergeFrom(const CTxprevout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTxprevout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
}

void CTxprevout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTxprevout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTxprevout::CopyFrom(const CTxprevout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTxprevout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTxprevout::IsInitialized() const {
  return true;
}

void CTxprevout::InternalSwap(CTxprevout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(n_, other->n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTxprevout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CScriptSig::InitAsDefaultInstance() {
}
class CScriptSig::_Internal {
 public:
};

CScriptSig::CScriptSig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CScriptSig)
}
CScriptSig::CScriptSig(const CScriptSig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign().empty()) {
    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub().empty()) {
    pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_);
  }
  // @@protoc_insertion_point(copy_constructor:CScriptSig)
}

void CScriptSig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CScriptSig_transaction_2eproto.base);
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CScriptSig::~CScriptSig() {
  // @@protoc_insertion_point(destructor:CScriptSig)
  SharedDtor();
}

void CScriptSig::SharedDtor() {
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CScriptSig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CScriptSig& CScriptSig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CScriptSig_transaction_2eproto.base);
  return *internal_default_instance();
}


void CScriptSig::Clear() {
// @@protoc_insertion_point(message_clear_start:CScriptSig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CScriptSig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pub = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CScriptSig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CScriptSig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sign = 1;
  if (this->sign().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sign(), target);
  }

  // bytes pub = 2;
  if (this->pub().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pub(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CScriptSig)
  return target;
}

size_t CScriptSig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CScriptSig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sign = 1;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes pub = 2;
  if (this->pub().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CScriptSig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CScriptSig)
  GOOGLE_DCHECK_NE(&from, this);
  const CScriptSig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CScriptSig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CScriptSig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CScriptSig)
    MergeFrom(*source);
  }
}

void CScriptSig::MergeFrom(const CScriptSig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CScriptSig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.pub().size() > 0) {

    pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_);
  }
}

void CScriptSig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CScriptSig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CScriptSig::CopyFrom(const CScriptSig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CScriptSig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CScriptSig::IsInitialized() const {
  return true;
}

void CScriptSig::InternalSwap(CScriptSig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sign_.Swap(&other->sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pub_.Swap(&other->pub_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CScriptSig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CTxin::InitAsDefaultInstance() {
  ::_CTxin_default_instance_._instance.get_mutable()->prevout_ = const_cast< ::CTxprevout*>(
      ::CTxprevout::internal_default_instance());
  ::_CTxin_default_instance_._instance.get_mutable()->scriptsig_ = const_cast< ::CScriptSig*>(
      ::CScriptSig::internal_default_instance());
}
class CTxin::_Internal {
 public:
  static const ::CTxprevout& prevout(const CTxin* msg);
  static const ::CScriptSig& scriptsig(const CTxin* msg);
};

const ::CTxprevout&
CTxin::_Internal::prevout(const CTxin* msg) {
  return *msg->prevout_;
}
const ::CScriptSig&
CTxin::_Internal::scriptsig(const CTxin* msg) {
  return *msg->scriptsig_;
}
CTxin::CTxin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CTxin)
}
CTxin::CTxin(const CTxin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_prevout()) {
    prevout_ = new ::CTxprevout(*from.prevout_);
  } else {
    prevout_ = nullptr;
  }
  if (from._internal_has_scriptsig()) {
    scriptsig_ = new ::CScriptSig(*from.scriptsig_);
  } else {
    scriptsig_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:CTxin)
}

void CTxin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CTxin_transaction_2eproto.base);
  ::memset(&prevout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&prevout_)) + sizeof(sequence_));
}

CTxin::~CTxin() {
  // @@protoc_insertion_point(destructor:CTxin)
  SharedDtor();
}

void CTxin::SharedDtor() {
  if (this != internal_default_instance()) delete prevout_;
  if (this != internal_default_instance()) delete scriptsig_;
}

void CTxin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTxin& CTxin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTxin_transaction_2eproto.base);
  return *internal_default_instance();
}


void CTxin::Clear() {
// @@protoc_insertion_point(message_clear_start:CTxin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && prevout_ != nullptr) {
    delete prevout_;
  }
  prevout_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scriptsig_ != nullptr) {
    delete scriptsig_;
  }
  scriptsig_ = nullptr;
  sequence_ = 0u;
  _internal_metadata_.Clear();
}

const char* CTxin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CTxprevout prevout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prevout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CScriptSig scriptSig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptsig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTxin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTxin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CTxprevout prevout = 1;
  if (this->has_prevout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prevout(this), target, stream);
  }

  // .CScriptSig scriptSig = 2;
  if (this->has_scriptsig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scriptsig(this), target, stream);
  }

  // uint32 sequence = 3;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTxin)
  return target;
}

size_t CTxin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTxin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CTxprevout prevout = 1;
  if (this->has_prevout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prevout_);
  }

  // .CScriptSig scriptSig = 2;
  if (this->has_scriptsig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scriptsig_);
  }

  // uint32 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTxin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTxin)
  GOOGLE_DCHECK_NE(&from, this);
  const CTxin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTxin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTxin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTxin)
    MergeFrom(*source);
  }
}

void CTxin::MergeFrom(const CTxin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTxin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prevout()) {
    _internal_mutable_prevout()->::CTxprevout::MergeFrom(from._internal_prevout());
  }
  if (from.has_scriptsig()) {
    _internal_mutable_scriptsig()->::CScriptSig::MergeFrom(from._internal_scriptsig());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void CTxin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTxin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTxin::CopyFrom(const CTxin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTxin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTxin::IsInitialized() const {
  return true;
}

void CTxin::InternalSwap(CTxin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(prevout_, other->prevout_);
  swap(scriptsig_, other->scriptsig_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTxin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CTxout::InitAsDefaultInstance() {
}
class CTxout::_Internal {
 public:
};

CTxout::CTxout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CTxout)
}
CTxout::CTxout(const CTxout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scriptpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scriptpubkey().empty()) {
    scriptpubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scriptpubkey_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:CTxout)
}

void CTxout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CTxout_transaction_2eproto.base);
  scriptpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
}

CTxout::~CTxout() {
  // @@protoc_insertion_point(destructor:CTxout)
  SharedDtor();
}

void CTxout::SharedDtor() {
  scriptpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTxout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTxout& CTxout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTxout_transaction_2eproto.base);
  return *internal_default_instance();
}


void CTxout::Clear() {
// @@protoc_insertion_point(message_clear_start:CTxout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scriptpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CTxout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scriptPubKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_scriptpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTxout.scriptPubKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTxout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTxout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  // string scriptPubKey = 2;
  if (this->scriptpubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scriptpubkey().data(), static_cast<int>(this->_internal_scriptpubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTxout.scriptPubKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scriptpubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTxout)
  return target;
}

size_t CTxout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTxout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scriptPubKey = 2;
  if (this->scriptpubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scriptpubkey());
  }

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTxout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTxout)
  GOOGLE_DCHECK_NE(&from, this);
  const CTxout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTxout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTxout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTxout)
    MergeFrom(*source);
  }
}

void CTxout::MergeFrom(const CTxout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTxout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scriptpubkey().size() > 0) {

    scriptpubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scriptpubkey_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void CTxout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTxout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTxout::CopyFrom(const CTxout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTxout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTxout::IsInitialized() const {
  return true;
}

void CTxout::InternalSwap(CTxout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scriptpubkey_.Swap(&other->scriptpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTxout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CSignPreHash::InitAsDefaultInstance() {
}
class CSignPreHash::_Internal {
 public:
};

CSignPreHash::CSignPreHash()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSignPreHash)
}
CSignPreHash::CSignPreHash(const CSignPreHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign().empty()) {
    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub().empty()) {
    pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_);
  }
  // @@protoc_insertion_point(copy_constructor:CSignPreHash)
}

void CSignPreHash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CSignPreHash_transaction_2eproto.base);
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSignPreHash::~CSignPreHash() {
  // @@protoc_insertion_point(destructor:CSignPreHash)
  SharedDtor();
}

void CSignPreHash::SharedDtor() {
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSignPreHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSignPreHash& CSignPreHash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSignPreHash_transaction_2eproto.base);
  return *internal_default_instance();
}


void CSignPreHash::Clear() {
// @@protoc_insertion_point(message_clear_start:CSignPreHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CSignPreHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pub = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSignPreHash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSignPreHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sign = 1;
  if (this->sign().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sign(), target);
  }

  // bytes pub = 2;
  if (this->pub().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pub(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSignPreHash)
  return target;
}

size_t CSignPreHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSignPreHash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sign = 1;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes pub = 2;
  if (this->pub().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pub());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSignPreHash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSignPreHash)
  GOOGLE_DCHECK_NE(&from, this);
  const CSignPreHash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSignPreHash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSignPreHash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSignPreHash)
    MergeFrom(*source);
  }
}

void CSignPreHash::MergeFrom(const CSignPreHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSignPreHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.pub().size() > 0) {

    pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_);
  }
}

void CSignPreHash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSignPreHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSignPreHash::CopyFrom(const CSignPreHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSignPreHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSignPreHash::IsInitialized() const {
  return true;
}

void CSignPreHash::InternalSwap(CSignPreHash* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sign_.Swap(&other->sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pub_.Swap(&other->pub_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSignPreHash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CTransaction::InitAsDefaultInstance() {
}
class CTransaction::_Internal {
 public:
};

CTransaction::CTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CTransaction)
}
CTransaction::CTransaction(const CTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      signprehash_(from.signprehash_),
      vin_(from.vin_),
      vout_(from.vout_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identity().empty()) {
    identity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identity_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra().empty()) {
    extra_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&time_)) + sizeof(n_));
  // @@protoc_insertion_point(copy_constructor:CTransaction)
}

void CTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CTransaction_transaction_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&time_)) + sizeof(n_));
}

CTransaction::~CTransaction() {
  // @@protoc_insertion_point(destructor:CTransaction)
  SharedDtor();
}

void CTransaction::SharedDtor() {
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTransaction& CTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTransaction_transaction_2eproto.base);
  return *internal_default_instance();
}


void CTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:CTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signprehash_.Clear();
  vin_.Clear();
  vout_.Clear();
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&time_)) + sizeof(n_));
  _internal_metadata_.Clear();
}

const char* CTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSignPreHash signPreHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signprehash(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string owner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTransaction.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string identity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTransaction.identity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTransaction.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CTxin vin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vin(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CTxout vout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vout(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string extra = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_extra();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTransaction.extra"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CTransaction.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  // repeated .CSignPreHash signPreHash = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signprehash_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_signprehash(i), target, stream);
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.owner");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_owner(), target);
  }

  // uint32 n = 5;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_n(), target);
  }

  // string identity = 6;
  if (this->identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.identity");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_identity(), target);
  }

  // string hash = 7;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.hash");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hash(), target);
  }

  // repeated .CTxin vin = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vin_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_vin(i), target, stream);
  }

  // repeated .CTxout vout = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vout_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_vout(i), target, stream);
  }

  // string extra = 10;
  if (this->extra().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.extra");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_extra(), target);
  }

  // string comment = 11;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CTransaction.comment");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CTransaction)
  return target;
}

size_t CTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSignPreHash signPreHash = 3;
  total_size += 1UL * this->_internal_signprehash_size();
  for (const auto& msg : this->signprehash_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CTxin vin = 8;
  total_size += 1UL * this->_internal_vin_size();
  for (const auto& msg : this->vin_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CTxout vout = 9;
  total_size += 1UL * this->_internal_vout_size();
  for (const auto& msg : this->vout_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string identity = 6;
  if (this->identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string hash = 7;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string extra = 10;
  if (this->extra().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  // string comment = 11;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 n = 5;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const CTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CTransaction)
    MergeFrom(*source);
  }
}

void CTransaction::MergeFrom(const CTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signprehash_.MergeFrom(from.signprehash_);
  vin_.MergeFrom(from.vin_);
  vout_.MergeFrom(from.vout_);
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.identity().size() > 0) {

    identity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identity_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.extra().size() > 0) {

    extra_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
}

void CTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTransaction::CopyFrom(const CTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTransaction::IsInitialized() const {
  return true;
}

void CTransaction::InternalSwap(CTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signprehash_.InternalSwap(&other->signprehash_);
  vin_.InternalSwap(&other->vin_);
  vout_.InternalSwap(&other->vout_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identity_.Swap(&other->identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extra_.Swap(&other->extra_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(version_, other->version_);
  swap(n_, other->n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CTxprevout* Arena::CreateMaybeMessage< ::CTxprevout >(Arena* arena) {
  return Arena::CreateInternal< ::CTxprevout >(arena);
}
template<> PROTOBUF_NOINLINE ::CScriptSig* Arena::CreateMaybeMessage< ::CScriptSig >(Arena* arena) {
  return Arena::CreateInternal< ::CScriptSig >(arena);
}
template<> PROTOBUF_NOINLINE ::CTxin* Arena::CreateMaybeMessage< ::CTxin >(Arena* arena) {
  return Arena::CreateInternal< ::CTxin >(arena);
}
template<> PROTOBUF_NOINLINE ::CTxout* Arena::CreateMaybeMessage< ::CTxout >(Arena* arena) {
  return Arena::CreateInternal< ::CTxout >(arena);
}
template<> PROTOBUF_NOINLINE ::CSignPreHash* Arena::CreateMaybeMessage< ::CSignPreHash >(Arena* arena) {
  return Arena::CreateInternal< ::CSignPreHash >(arena);
}
template<> PROTOBUF_NOINLINE ::CTransaction* Arena::CreateMaybeMessage< ::CTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::CTransaction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
