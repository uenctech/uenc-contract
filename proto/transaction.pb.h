// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_2eproto;
class CScriptSig;
class CScriptSigDefaultTypeInternal;
extern CScriptSigDefaultTypeInternal _CScriptSig_default_instance_;
class CSignPreHash;
class CSignPreHashDefaultTypeInternal;
extern CSignPreHashDefaultTypeInternal _CSignPreHash_default_instance_;
class CTransaction;
class CTransactionDefaultTypeInternal;
extern CTransactionDefaultTypeInternal _CTransaction_default_instance_;
class CTxin;
class CTxinDefaultTypeInternal;
extern CTxinDefaultTypeInternal _CTxin_default_instance_;
class CTxout;
class CTxoutDefaultTypeInternal;
extern CTxoutDefaultTypeInternal _CTxout_default_instance_;
class CTxprevout;
class CTxprevoutDefaultTypeInternal;
extern CTxprevoutDefaultTypeInternal _CTxprevout_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CScriptSig* Arena::CreateMaybeMessage<::CScriptSig>(Arena*);
template<> ::CSignPreHash* Arena::CreateMaybeMessage<::CSignPreHash>(Arena*);
template<> ::CTransaction* Arena::CreateMaybeMessage<::CTransaction>(Arena*);
template<> ::CTxin* Arena::CreateMaybeMessage<::CTxin>(Arena*);
template<> ::CTxout* Arena::CreateMaybeMessage<::CTxout>(Arena*);
template<> ::CTxprevout* Arena::CreateMaybeMessage<::CTxprevout>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CTxprevout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTxprevout) */ {
 public:
  CTxprevout();
  virtual ~CTxprevout();

  CTxprevout(const CTxprevout& from);
  CTxprevout(CTxprevout&& from) noexcept
    : CTxprevout() {
    *this = ::std::move(from);
  }

  inline CTxprevout& operator=(const CTxprevout& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTxprevout& operator=(CTxprevout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTxprevout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTxprevout* internal_default_instance() {
    return reinterpret_cast<const CTxprevout*>(
               &_CTxprevout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CTxprevout& a, CTxprevout& b) {
    a.Swap(&b);
  }
  inline void Swap(CTxprevout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTxprevout* New() const final {
    return CreateMaybeMessage<CTxprevout>(nullptr);
  }

  CTxprevout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTxprevout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTxprevout& from);
  void MergeFrom(const CTxprevout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTxprevout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTxprevout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_2eproto);
    return ::descriptor_table_transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kNFieldNumber = 2,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint32 n = 2;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CTxprevout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class CScriptSig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CScriptSig) */ {
 public:
  CScriptSig();
  virtual ~CScriptSig();

  CScriptSig(const CScriptSig& from);
  CScriptSig(CScriptSig&& from) noexcept
    : CScriptSig() {
    *this = ::std::move(from);
  }

  inline CScriptSig& operator=(const CScriptSig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CScriptSig& operator=(CScriptSig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CScriptSig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CScriptSig* internal_default_instance() {
    return reinterpret_cast<const CScriptSig*>(
               &_CScriptSig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CScriptSig& a, CScriptSig& b) {
    a.Swap(&b);
  }
  inline void Swap(CScriptSig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CScriptSig* New() const final {
    return CreateMaybeMessage<CScriptSig>(nullptr);
  }

  CScriptSig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CScriptSig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CScriptSig& from);
  void MergeFrom(const CScriptSig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CScriptSig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CScriptSig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_2eproto);
    return ::descriptor_table_transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignFieldNumber = 1,
    kPubFieldNumber = 2,
  };
  // bytes sign = 1;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // bytes pub = 2;
  void clear_pub();
  const std::string& pub() const;
  void set_pub(const std::string& value);
  void set_pub(std::string&& value);
  void set_pub(const char* value);
  void set_pub(const void* value, size_t size);
  std::string* mutable_pub();
  std::string* release_pub();
  void set_allocated_pub(std::string* pub);
  private:
  const std::string& _internal_pub() const;
  void _internal_set_pub(const std::string& value);
  std::string* _internal_mutable_pub();
  public:

  // @@protoc_insertion_point(class_scope:CScriptSig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class CTxin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTxin) */ {
 public:
  CTxin();
  virtual ~CTxin();

  CTxin(const CTxin& from);
  CTxin(CTxin&& from) noexcept
    : CTxin() {
    *this = ::std::move(from);
  }

  inline CTxin& operator=(const CTxin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTxin& operator=(CTxin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTxin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTxin* internal_default_instance() {
    return reinterpret_cast<const CTxin*>(
               &_CTxin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CTxin& a, CTxin& b) {
    a.Swap(&b);
  }
  inline void Swap(CTxin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTxin* New() const final {
    return CreateMaybeMessage<CTxin>(nullptr);
  }

  CTxin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTxin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTxin& from);
  void MergeFrom(const CTxin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTxin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTxin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_2eproto);
    return ::descriptor_table_transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevoutFieldNumber = 1,
    kScriptSigFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // .CTxprevout prevout = 1;
  bool has_prevout() const;
  private:
  bool _internal_has_prevout() const;
  public:
  void clear_prevout();
  const ::CTxprevout& prevout() const;
  ::CTxprevout* release_prevout();
  ::CTxprevout* mutable_prevout();
  void set_allocated_prevout(::CTxprevout* prevout);
  private:
  const ::CTxprevout& _internal_prevout() const;
  ::CTxprevout* _internal_mutable_prevout();
  public:

  // .CScriptSig scriptSig = 2;
  bool has_scriptsig() const;
  private:
  bool _internal_has_scriptsig() const;
  public:
  void clear_scriptsig();
  const ::CScriptSig& scriptsig() const;
  ::CScriptSig* release_scriptsig();
  ::CScriptSig* mutable_scriptsig();
  void set_allocated_scriptsig(::CScriptSig* scriptsig);
  private:
  const ::CScriptSig& _internal_scriptsig() const;
  ::CScriptSig* _internal_mutable_scriptsig();
  public:

  // uint32 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CTxin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CTxprevout* prevout_;
  ::CScriptSig* scriptsig_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class CTxout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTxout) */ {
 public:
  CTxout();
  virtual ~CTxout();

  CTxout(const CTxout& from);
  CTxout(CTxout&& from) noexcept
    : CTxout() {
    *this = ::std::move(from);
  }

  inline CTxout& operator=(const CTxout& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTxout& operator=(CTxout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTxout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTxout* internal_default_instance() {
    return reinterpret_cast<const CTxout*>(
               &_CTxout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CTxout& a, CTxout& b) {
    a.Swap(&b);
  }
  inline void Swap(CTxout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTxout* New() const final {
    return CreateMaybeMessage<CTxout>(nullptr);
  }

  CTxout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTxout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTxout& from);
  void MergeFrom(const CTxout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTxout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTxout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_2eproto);
    return ::descriptor_table_transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPubKeyFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // string scriptPubKey = 2;
  void clear_scriptpubkey();
  const std::string& scriptpubkey() const;
  void set_scriptpubkey(const std::string& value);
  void set_scriptpubkey(std::string&& value);
  void set_scriptpubkey(const char* value);
  void set_scriptpubkey(const char* value, size_t size);
  std::string* mutable_scriptpubkey();
  std::string* release_scriptpubkey();
  void set_allocated_scriptpubkey(std::string* scriptpubkey);
  private:
  const std::string& _internal_scriptpubkey() const;
  void _internal_set_scriptpubkey(const std::string& value);
  std::string* _internal_mutable_scriptpubkey();
  public:

  // int64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CTxout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptpubkey_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class CSignPreHash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSignPreHash) */ {
 public:
  CSignPreHash();
  virtual ~CSignPreHash();

  CSignPreHash(const CSignPreHash& from);
  CSignPreHash(CSignPreHash&& from) noexcept
    : CSignPreHash() {
    *this = ::std::move(from);
  }

  inline CSignPreHash& operator=(const CSignPreHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSignPreHash& operator=(CSignPreHash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSignPreHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSignPreHash* internal_default_instance() {
    return reinterpret_cast<const CSignPreHash*>(
               &_CSignPreHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSignPreHash& a, CSignPreHash& b) {
    a.Swap(&b);
  }
  inline void Swap(CSignPreHash* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSignPreHash* New() const final {
    return CreateMaybeMessage<CSignPreHash>(nullptr);
  }

  CSignPreHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSignPreHash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSignPreHash& from);
  void MergeFrom(const CSignPreHash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSignPreHash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSignPreHash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_2eproto);
    return ::descriptor_table_transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignFieldNumber = 1,
    kPubFieldNumber = 2,
  };
  // bytes sign = 1;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // bytes pub = 2;
  void clear_pub();
  const std::string& pub() const;
  void set_pub(const std::string& value);
  void set_pub(std::string&& value);
  void set_pub(const char* value);
  void set_pub(const void* value, size_t size);
  std::string* mutable_pub();
  std::string* release_pub();
  void set_allocated_pub(std::string* pub);
  private:
  const std::string& _internal_pub() const;
  void _internal_set_pub(const std::string& value);
  std::string* _internal_mutable_pub();
  public:

  // @@protoc_insertion_point(class_scope:CSignPreHash)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class CTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CTransaction) */ {
 public:
  CTransaction();
  virtual ~CTransaction();

  CTransaction(const CTransaction& from);
  CTransaction(CTransaction&& from) noexcept
    : CTransaction() {
    *this = ::std::move(from);
  }

  inline CTransaction& operator=(const CTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CTransaction& operator=(CTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CTransaction* internal_default_instance() {
    return reinterpret_cast<const CTransaction*>(
               &_CTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CTransaction& a, CTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(CTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CTransaction* New() const final {
    return CreateMaybeMessage<CTransaction>(nullptr);
  }

  CTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CTransaction& from);
  void MergeFrom(const CTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_2eproto);
    return ::descriptor_table_transaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignPreHashFieldNumber = 3,
    kVinFieldNumber = 8,
    kVoutFieldNumber = 9,
    kOwnerFieldNumber = 4,
    kIdentityFieldNumber = 6,
    kHashFieldNumber = 7,
    kExtraFieldNumber = 10,
    kCommentFieldNumber = 11,
    kTimeFieldNumber = 2,
    kVersionFieldNumber = 1,
    kNFieldNumber = 5,
  };
  // repeated .CSignPreHash signPreHash = 3;
  int signprehash_size() const;
  private:
  int _internal_signprehash_size() const;
  public:
  void clear_signprehash();
  ::CSignPreHash* mutable_signprehash(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSignPreHash >*
      mutable_signprehash();
  private:
  const ::CSignPreHash& _internal_signprehash(int index) const;
  ::CSignPreHash* _internal_add_signprehash();
  public:
  const ::CSignPreHash& signprehash(int index) const;
  ::CSignPreHash* add_signprehash();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSignPreHash >&
      signprehash() const;

  // repeated .CTxin vin = 8;
  int vin_size() const;
  private:
  int _internal_vin_size() const;
  public:
  void clear_vin();
  ::CTxin* mutable_vin(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxin >*
      mutable_vin();
  private:
  const ::CTxin& _internal_vin(int index) const;
  ::CTxin* _internal_add_vin();
  public:
  const ::CTxin& vin(int index) const;
  ::CTxin* add_vin();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxin >&
      vin() const;

  // repeated .CTxout vout = 9;
  int vout_size() const;
  private:
  int _internal_vout_size() const;
  public:
  void clear_vout();
  ::CTxout* mutable_vout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxout >*
      mutable_vout();
  private:
  const ::CTxout& _internal_vout(int index) const;
  ::CTxout* _internal_add_vout();
  public:
  const ::CTxout& vout(int index) const;
  ::CTxout* add_vout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxout >&
      vout() const;

  // string owner = 4;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string identity = 6;
  void clear_identity();
  const std::string& identity() const;
  void set_identity(const std::string& value);
  void set_identity(std::string&& value);
  void set_identity(const char* value);
  void set_identity(const char* value, size_t size);
  std::string* mutable_identity();
  std::string* release_identity();
  void set_allocated_identity(std::string* identity);
  private:
  const std::string& _internal_identity() const;
  void _internal_set_identity(const std::string& value);
  std::string* _internal_mutable_identity();
  public:

  // string hash = 7;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string extra = 10;
  void clear_extra();
  const std::string& extra() const;
  void set_extra(const std::string& value);
  void set_extra(std::string&& value);
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  std::string* mutable_extra();
  std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // string comment = 11;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // uint64 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 n = 5;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CTransaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSignPreHash > signprehash_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxin > vin_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxout > vout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CTxprevout

// string hash = 1;
inline void CTxprevout::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTxprevout::hash() const {
  // @@protoc_insertion_point(field_get:CTxprevout.hash)
  return _internal_hash();
}
inline void CTxprevout::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:CTxprevout.hash)
}
inline std::string* CTxprevout::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:CTxprevout.hash)
  return _internal_mutable_hash();
}
inline const std::string& CTxprevout::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void CTxprevout::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CTxprevout::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CTxprevout.hash)
}
inline void CTxprevout::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CTxprevout.hash)
}
inline void CTxprevout::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CTxprevout.hash)
}
inline std::string* CTxprevout::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTxprevout::release_hash() {
  // @@protoc_insertion_point(field_release:CTxprevout.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTxprevout::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:CTxprevout.hash)
}

// uint32 n = 2;
inline void CTxprevout::clear_n() {
  n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTxprevout::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTxprevout::n() const {
  // @@protoc_insertion_point(field_get:CTxprevout.n)
  return _internal_n();
}
inline void CTxprevout::_internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_ = value;
}
inline void CTxprevout::set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:CTxprevout.n)
}

// -------------------------------------------------------------------

// CScriptSig

// bytes sign = 1;
inline void CScriptSig::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CScriptSig::sign() const {
  // @@protoc_insertion_point(field_get:CScriptSig.sign)
  return _internal_sign();
}
inline void CScriptSig::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:CScriptSig.sign)
}
inline std::string* CScriptSig::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:CScriptSig.sign)
  return _internal_mutable_sign();
}
inline const std::string& CScriptSig::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void CScriptSig::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CScriptSig::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CScriptSig.sign)
}
inline void CScriptSig::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CScriptSig.sign)
}
inline void CScriptSig::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CScriptSig.sign)
}
inline std::string* CScriptSig::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CScriptSig::release_sign() {
  // @@protoc_insertion_point(field_release:CScriptSig.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CScriptSig::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:CScriptSig.sign)
}

// bytes pub = 2;
inline void CScriptSig::clear_pub() {
  pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CScriptSig::pub() const {
  // @@protoc_insertion_point(field_get:CScriptSig.pub)
  return _internal_pub();
}
inline void CScriptSig::set_pub(const std::string& value) {
  _internal_set_pub(value);
  // @@protoc_insertion_point(field_set:CScriptSig.pub)
}
inline std::string* CScriptSig::mutable_pub() {
  // @@protoc_insertion_point(field_mutable:CScriptSig.pub)
  return _internal_mutable_pub();
}
inline const std::string& CScriptSig::_internal_pub() const {
  return pub_.GetNoArena();
}
inline void CScriptSig::_internal_set_pub(const std::string& value) {
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CScriptSig::set_pub(std::string&& value) {
  
  pub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CScriptSig.pub)
}
inline void CScriptSig::set_pub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CScriptSig.pub)
}
inline void CScriptSig::set_pub(const void* value, size_t size) {
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CScriptSig.pub)
}
inline std::string* CScriptSig::_internal_mutable_pub() {
  
  return pub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CScriptSig::release_pub() {
  // @@protoc_insertion_point(field_release:CScriptSig.pub)
  
  return pub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CScriptSig::set_allocated_pub(std::string* pub) {
  if (pub != nullptr) {
    
  } else {
    
  }
  pub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub);
  // @@protoc_insertion_point(field_set_allocated:CScriptSig.pub)
}

// -------------------------------------------------------------------

// CTxin

// .CTxprevout prevout = 1;
inline bool CTxin::_internal_has_prevout() const {
  return this != internal_default_instance() && prevout_ != nullptr;
}
inline bool CTxin::has_prevout() const {
  return _internal_has_prevout();
}
inline void CTxin::clear_prevout() {
  if (GetArenaNoVirtual() == nullptr && prevout_ != nullptr) {
    delete prevout_;
  }
  prevout_ = nullptr;
}
inline const ::CTxprevout& CTxin::_internal_prevout() const {
  const ::CTxprevout* p = prevout_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CTxprevout*>(
      &::_CTxprevout_default_instance_);
}
inline const ::CTxprevout& CTxin::prevout() const {
  // @@protoc_insertion_point(field_get:CTxin.prevout)
  return _internal_prevout();
}
inline ::CTxprevout* CTxin::release_prevout() {
  // @@protoc_insertion_point(field_release:CTxin.prevout)
  
  ::CTxprevout* temp = prevout_;
  prevout_ = nullptr;
  return temp;
}
inline ::CTxprevout* CTxin::_internal_mutable_prevout() {
  
  if (prevout_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTxprevout>(GetArenaNoVirtual());
    prevout_ = p;
  }
  return prevout_;
}
inline ::CTxprevout* CTxin::mutable_prevout() {
  // @@protoc_insertion_point(field_mutable:CTxin.prevout)
  return _internal_mutable_prevout();
}
inline void CTxin::set_allocated_prevout(::CTxprevout* prevout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prevout_;
  }
  if (prevout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prevout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prevout, submessage_arena);
    }
    
  } else {
    
  }
  prevout_ = prevout;
  // @@protoc_insertion_point(field_set_allocated:CTxin.prevout)
}

// .CScriptSig scriptSig = 2;
inline bool CTxin::_internal_has_scriptsig() const {
  return this != internal_default_instance() && scriptsig_ != nullptr;
}
inline bool CTxin::has_scriptsig() const {
  return _internal_has_scriptsig();
}
inline void CTxin::clear_scriptsig() {
  if (GetArenaNoVirtual() == nullptr && scriptsig_ != nullptr) {
    delete scriptsig_;
  }
  scriptsig_ = nullptr;
}
inline const ::CScriptSig& CTxin::_internal_scriptsig() const {
  const ::CScriptSig* p = scriptsig_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CScriptSig*>(
      &::_CScriptSig_default_instance_);
}
inline const ::CScriptSig& CTxin::scriptsig() const {
  // @@protoc_insertion_point(field_get:CTxin.scriptSig)
  return _internal_scriptsig();
}
inline ::CScriptSig* CTxin::release_scriptsig() {
  // @@protoc_insertion_point(field_release:CTxin.scriptSig)
  
  ::CScriptSig* temp = scriptsig_;
  scriptsig_ = nullptr;
  return temp;
}
inline ::CScriptSig* CTxin::_internal_mutable_scriptsig() {
  
  if (scriptsig_ == nullptr) {
    auto* p = CreateMaybeMessage<::CScriptSig>(GetArenaNoVirtual());
    scriptsig_ = p;
  }
  return scriptsig_;
}
inline ::CScriptSig* CTxin::mutable_scriptsig() {
  // @@protoc_insertion_point(field_mutable:CTxin.scriptSig)
  return _internal_mutable_scriptsig();
}
inline void CTxin::set_allocated_scriptsig(::CScriptSig* scriptsig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scriptsig_;
  }
  if (scriptsig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scriptsig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptsig, submessage_arena);
    }
    
  } else {
    
  }
  scriptsig_ = scriptsig;
  // @@protoc_insertion_point(field_set_allocated:CTxin.scriptSig)
}

// uint32 sequence = 3;
inline void CTxin::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTxin::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTxin::sequence() const {
  // @@protoc_insertion_point(field_get:CTxin.sequence)
  return _internal_sequence();
}
inline void CTxin::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void CTxin::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:CTxin.sequence)
}

// -------------------------------------------------------------------

// CTxout

// int64 value = 1;
inline void CTxout::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTxout::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CTxout::value() const {
  // @@protoc_insertion_point(field_get:CTxout.value)
  return _internal_value();
}
inline void CTxout::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void CTxout::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CTxout.value)
}

// string scriptPubKey = 2;
inline void CTxout::clear_scriptpubkey() {
  scriptpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTxout::scriptpubkey() const {
  // @@protoc_insertion_point(field_get:CTxout.scriptPubKey)
  return _internal_scriptpubkey();
}
inline void CTxout::set_scriptpubkey(const std::string& value) {
  _internal_set_scriptpubkey(value);
  // @@protoc_insertion_point(field_set:CTxout.scriptPubKey)
}
inline std::string* CTxout::mutable_scriptpubkey() {
  // @@protoc_insertion_point(field_mutable:CTxout.scriptPubKey)
  return _internal_mutable_scriptpubkey();
}
inline const std::string& CTxout::_internal_scriptpubkey() const {
  return scriptpubkey_.GetNoArena();
}
inline void CTxout::_internal_set_scriptpubkey(const std::string& value) {
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CTxout::set_scriptpubkey(std::string&& value) {
  
  scriptpubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CTxout.scriptPubKey)
}
inline void CTxout::set_scriptpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CTxout.scriptPubKey)
}
inline void CTxout::set_scriptpubkey(const char* value, size_t size) {
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CTxout.scriptPubKey)
}
inline std::string* CTxout::_internal_mutable_scriptpubkey() {
  
  return scriptpubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTxout::release_scriptpubkey() {
  // @@protoc_insertion_point(field_release:CTxout.scriptPubKey)
  
  return scriptpubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTxout::set_allocated_scriptpubkey(std::string* scriptpubkey) {
  if (scriptpubkey != nullptr) {
    
  } else {
    
  }
  scriptpubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptpubkey);
  // @@protoc_insertion_point(field_set_allocated:CTxout.scriptPubKey)
}

// -------------------------------------------------------------------

// CSignPreHash

// bytes sign = 1;
inline void CSignPreHash::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CSignPreHash::sign() const {
  // @@protoc_insertion_point(field_get:CSignPreHash.sign)
  return _internal_sign();
}
inline void CSignPreHash::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:CSignPreHash.sign)
}
inline std::string* CSignPreHash::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:CSignPreHash.sign)
  return _internal_mutable_sign();
}
inline const std::string& CSignPreHash::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void CSignPreHash::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CSignPreHash::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSignPreHash.sign)
}
inline void CSignPreHash::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSignPreHash.sign)
}
inline void CSignPreHash::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSignPreHash.sign)
}
inline std::string* CSignPreHash::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CSignPreHash::release_sign() {
  // @@protoc_insertion_point(field_release:CSignPreHash.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CSignPreHash::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:CSignPreHash.sign)
}

// bytes pub = 2;
inline void CSignPreHash::clear_pub() {
  pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CSignPreHash::pub() const {
  // @@protoc_insertion_point(field_get:CSignPreHash.pub)
  return _internal_pub();
}
inline void CSignPreHash::set_pub(const std::string& value) {
  _internal_set_pub(value);
  // @@protoc_insertion_point(field_set:CSignPreHash.pub)
}
inline std::string* CSignPreHash::mutable_pub() {
  // @@protoc_insertion_point(field_mutable:CSignPreHash.pub)
  return _internal_mutable_pub();
}
inline const std::string& CSignPreHash::_internal_pub() const {
  return pub_.GetNoArena();
}
inline void CSignPreHash::_internal_set_pub(const std::string& value) {
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CSignPreHash::set_pub(std::string&& value) {
  
  pub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSignPreHash.pub)
}
inline void CSignPreHash::set_pub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSignPreHash.pub)
}
inline void CSignPreHash::set_pub(const void* value, size_t size) {
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSignPreHash.pub)
}
inline std::string* CSignPreHash::_internal_mutable_pub() {
  
  return pub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CSignPreHash::release_pub() {
  // @@protoc_insertion_point(field_release:CSignPreHash.pub)
  
  return pub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CSignPreHash::set_allocated_pub(std::string* pub) {
  if (pub != nullptr) {
    
  } else {
    
  }
  pub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub);
  // @@protoc_insertion_point(field_set_allocated:CSignPreHash.pub)
}

// -------------------------------------------------------------------

// CTransaction

// uint32 version = 1;
inline void CTransaction::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTransaction::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTransaction::version() const {
  // @@protoc_insertion_point(field_get:CTransaction.version)
  return _internal_version();
}
inline void CTransaction::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void CTransaction::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CTransaction.version)
}

// uint64 time = 2;
inline void CTransaction::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTransaction::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CTransaction::time() const {
  // @@protoc_insertion_point(field_get:CTransaction.time)
  return _internal_time();
}
inline void CTransaction::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void CTransaction::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CTransaction.time)
}

// repeated .CSignPreHash signPreHash = 3;
inline int CTransaction::_internal_signprehash_size() const {
  return signprehash_.size();
}
inline int CTransaction::signprehash_size() const {
  return _internal_signprehash_size();
}
inline void CTransaction::clear_signprehash() {
  signprehash_.Clear();
}
inline ::CSignPreHash* CTransaction::mutable_signprehash(int index) {
  // @@protoc_insertion_point(field_mutable:CTransaction.signPreHash)
  return signprehash_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSignPreHash >*
CTransaction::mutable_signprehash() {
  // @@protoc_insertion_point(field_mutable_list:CTransaction.signPreHash)
  return &signprehash_;
}
inline const ::CSignPreHash& CTransaction::_internal_signprehash(int index) const {
  return signprehash_.Get(index);
}
inline const ::CSignPreHash& CTransaction::signprehash(int index) const {
  // @@protoc_insertion_point(field_get:CTransaction.signPreHash)
  return _internal_signprehash(index);
}
inline ::CSignPreHash* CTransaction::_internal_add_signprehash() {
  return signprehash_.Add();
}
inline ::CSignPreHash* CTransaction::add_signprehash() {
  // @@protoc_insertion_point(field_add:CTransaction.signPreHash)
  return _internal_add_signprehash();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSignPreHash >&
CTransaction::signprehash() const {
  // @@protoc_insertion_point(field_list:CTransaction.signPreHash)
  return signprehash_;
}

// string owner = 4;
inline void CTransaction::clear_owner() {
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTransaction::owner() const {
  // @@protoc_insertion_point(field_get:CTransaction.owner)
  return _internal_owner();
}
inline void CTransaction::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:CTransaction.owner)
}
inline std::string* CTransaction::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:CTransaction.owner)
  return _internal_mutable_owner();
}
inline const std::string& CTransaction::_internal_owner() const {
  return owner_.GetNoArena();
}
inline void CTransaction::_internal_set_owner(const std::string& value) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CTransaction::set_owner(std::string&& value) {
  
  owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CTransaction.owner)
}
inline void CTransaction::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CTransaction.owner)
}
inline void CTransaction::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CTransaction.owner)
}
inline std::string* CTransaction::_internal_mutable_owner() {
  
  return owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTransaction::release_owner() {
  // @@protoc_insertion_point(field_release:CTransaction.owner)
  
  return owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTransaction::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:CTransaction.owner)
}

// uint32 n = 5;
inline void CTransaction::clear_n() {
  n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTransaction::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CTransaction::n() const {
  // @@protoc_insertion_point(field_get:CTransaction.n)
  return _internal_n();
}
inline void CTransaction::_internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_ = value;
}
inline void CTransaction::set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:CTransaction.n)
}

// string identity = 6;
inline void CTransaction::clear_identity() {
  identity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTransaction::identity() const {
  // @@protoc_insertion_point(field_get:CTransaction.identity)
  return _internal_identity();
}
inline void CTransaction::set_identity(const std::string& value) {
  _internal_set_identity(value);
  // @@protoc_insertion_point(field_set:CTransaction.identity)
}
inline std::string* CTransaction::mutable_identity() {
  // @@protoc_insertion_point(field_mutable:CTransaction.identity)
  return _internal_mutable_identity();
}
inline const std::string& CTransaction::_internal_identity() const {
  return identity_.GetNoArena();
}
inline void CTransaction::_internal_set_identity(const std::string& value) {
  
  identity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CTransaction::set_identity(std::string&& value) {
  
  identity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CTransaction.identity)
}
inline void CTransaction::set_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CTransaction.identity)
}
inline void CTransaction::set_identity(const char* value, size_t size) {
  
  identity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CTransaction.identity)
}
inline std::string* CTransaction::_internal_mutable_identity() {
  
  return identity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTransaction::release_identity() {
  // @@protoc_insertion_point(field_release:CTransaction.identity)
  
  return identity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTransaction::set_allocated_identity(std::string* identity) {
  if (identity != nullptr) {
    
  } else {
    
  }
  identity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity);
  // @@protoc_insertion_point(field_set_allocated:CTransaction.identity)
}

// string hash = 7;
inline void CTransaction::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTransaction::hash() const {
  // @@protoc_insertion_point(field_get:CTransaction.hash)
  return _internal_hash();
}
inline void CTransaction::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:CTransaction.hash)
}
inline std::string* CTransaction::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:CTransaction.hash)
  return _internal_mutable_hash();
}
inline const std::string& CTransaction::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void CTransaction::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CTransaction::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CTransaction.hash)
}
inline void CTransaction::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CTransaction.hash)
}
inline void CTransaction::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CTransaction.hash)
}
inline std::string* CTransaction::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTransaction::release_hash() {
  // @@protoc_insertion_point(field_release:CTransaction.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTransaction::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:CTransaction.hash)
}

// repeated .CTxin vin = 8;
inline int CTransaction::_internal_vin_size() const {
  return vin_.size();
}
inline int CTransaction::vin_size() const {
  return _internal_vin_size();
}
inline void CTransaction::clear_vin() {
  vin_.Clear();
}
inline ::CTxin* CTransaction::mutable_vin(int index) {
  // @@protoc_insertion_point(field_mutable:CTransaction.vin)
  return vin_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxin >*
CTransaction::mutable_vin() {
  // @@protoc_insertion_point(field_mutable_list:CTransaction.vin)
  return &vin_;
}
inline const ::CTxin& CTransaction::_internal_vin(int index) const {
  return vin_.Get(index);
}
inline const ::CTxin& CTransaction::vin(int index) const {
  // @@protoc_insertion_point(field_get:CTransaction.vin)
  return _internal_vin(index);
}
inline ::CTxin* CTransaction::_internal_add_vin() {
  return vin_.Add();
}
inline ::CTxin* CTransaction::add_vin() {
  // @@protoc_insertion_point(field_add:CTransaction.vin)
  return _internal_add_vin();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxin >&
CTransaction::vin() const {
  // @@protoc_insertion_point(field_list:CTransaction.vin)
  return vin_;
}

// repeated .CTxout vout = 9;
inline int CTransaction::_internal_vout_size() const {
  return vout_.size();
}
inline int CTransaction::vout_size() const {
  return _internal_vout_size();
}
inline void CTransaction::clear_vout() {
  vout_.Clear();
}
inline ::CTxout* CTransaction::mutable_vout(int index) {
  // @@protoc_insertion_point(field_mutable:CTransaction.vout)
  return vout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxout >*
CTransaction::mutable_vout() {
  // @@protoc_insertion_point(field_mutable_list:CTransaction.vout)
  return &vout_;
}
inline const ::CTxout& CTransaction::_internal_vout(int index) const {
  return vout_.Get(index);
}
inline const ::CTxout& CTransaction::vout(int index) const {
  // @@protoc_insertion_point(field_get:CTransaction.vout)
  return _internal_vout(index);
}
inline ::CTxout* CTransaction::_internal_add_vout() {
  return vout_.Add();
}
inline ::CTxout* CTransaction::add_vout() {
  // @@protoc_insertion_point(field_add:CTransaction.vout)
  return _internal_add_vout();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CTxout >&
CTransaction::vout() const {
  // @@protoc_insertion_point(field_list:CTransaction.vout)
  return vout_;
}

// string extra = 10;
inline void CTransaction::clear_extra() {
  extra_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTransaction::extra() const {
  // @@protoc_insertion_point(field_get:CTransaction.extra)
  return _internal_extra();
}
inline void CTransaction::set_extra(const std::string& value) {
  _internal_set_extra(value);
  // @@protoc_insertion_point(field_set:CTransaction.extra)
}
inline std::string* CTransaction::mutable_extra() {
  // @@protoc_insertion_point(field_mutable:CTransaction.extra)
  return _internal_mutable_extra();
}
inline const std::string& CTransaction::_internal_extra() const {
  return extra_.GetNoArena();
}
inline void CTransaction::_internal_set_extra(const std::string& value) {
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CTransaction::set_extra(std::string&& value) {
  
  extra_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CTransaction.extra)
}
inline void CTransaction::set_extra(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CTransaction.extra)
}
inline void CTransaction::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CTransaction.extra)
}
inline std::string* CTransaction::_internal_mutable_extra() {
  
  return extra_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTransaction::release_extra() {
  // @@protoc_insertion_point(field_release:CTransaction.extra)
  
  return extra_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTransaction::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:CTransaction.extra)
}

// string comment = 11;
inline void CTransaction::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CTransaction::comment() const {
  // @@protoc_insertion_point(field_get:CTransaction.comment)
  return _internal_comment();
}
inline void CTransaction::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:CTransaction.comment)
}
inline std::string* CTransaction::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:CTransaction.comment)
  return _internal_mutable_comment();
}
inline const std::string& CTransaction::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void CTransaction::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CTransaction::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CTransaction.comment)
}
inline void CTransaction::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CTransaction.comment)
}
inline void CTransaction::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CTransaction.comment)
}
inline std::string* CTransaction::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CTransaction::release_comment() {
  // @@protoc_insertion_point(field_release:CTransaction.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CTransaction::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:CTransaction.comment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto
