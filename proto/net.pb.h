// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto;
class BroadcaseMsgReq;
class BroadcaseMsgReqDefaultTypeInternal;
extern BroadcaseMsgReqDefaultTypeInternal _BroadcaseMsgReq_default_instance_;
class BroadcastNodeReq;
class BroadcastNodeReqDefaultTypeInternal;
extern BroadcastNodeReqDefaultTypeInternal _BroadcastNodeReq_default_instance_;
class ConnectNodeReq;
class ConnectNodeReqDefaultTypeInternal;
extern ConnectNodeReqDefaultTypeInternal _ConnectNodeReq_default_instance_;
class EchoAck;
class EchoAckDefaultTypeInternal;
extern EchoAckDefaultTypeInternal _EchoAck_default_instance_;
class EchoReq;
class EchoReqDefaultTypeInternal;
extern EchoReqDefaultTypeInternal _EchoReq_default_instance_;
class GetNodeCacheAck;
class GetNodeCacheAckDefaultTypeInternal;
extern GetNodeCacheAckDefaultTypeInternal _GetNodeCacheAck_default_instance_;
class GetNodeCacheReq;
class GetNodeCacheReqDefaultTypeInternal;
extern GetNodeCacheReqDefaultTypeInternal _GetNodeCacheReq_default_instance_;
class GetTransInfoAck;
class GetTransInfoAckDefaultTypeInternal;
extern GetTransInfoAckDefaultTypeInternal _GetTransInfoAck_default_instance_;
class GetTransInfoReq;
class GetTransInfoReqDefaultTypeInternal;
extern GetTransInfoReqDefaultTypeInternal _GetTransInfoReq_default_instance_;
class NodeCacheItem;
class NodeCacheItemDefaultTypeInternal;
extern NodeCacheItemDefaultTypeInternal _NodeCacheItem_default_instance_;
class NodeHeightChangedReq;
class NodeHeightChangedReqDefaultTypeInternal;
extern NodeHeightChangedReqDefaultTypeInternal _NodeHeightChangedReq_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NotifyConnectReq;
class NotifyConnectReqDefaultTypeInternal;
extern NotifyConnectReqDefaultTypeInternal _NotifyConnectReq_default_instance_;
class PingReq;
class PingReqDefaultTypeInternal;
extern PingReqDefaultTypeInternal _PingReq_default_instance_;
class PongReq;
class PongReqDefaultTypeInternal;
extern PongReqDefaultTypeInternal _PongReq_default_instance_;
class PrintMsgReq;
class PrintMsgReqDefaultTypeInternal;
extern PrintMsgReqDefaultTypeInternal _PrintMsgReq_default_instance_;
class RegisterNodeAck;
class RegisterNodeAckDefaultTypeInternal;
extern RegisterNodeAckDefaultTypeInternal _RegisterNodeAck_default_instance_;
class RegisterNodeReq;
class RegisterNodeReqDefaultTypeInternal;
extern RegisterNodeReqDefaultTypeInternal _RegisterNodeReq_default_instance_;
class SyncNodeAck;
class SyncNodeAckDefaultTypeInternal;
extern SyncNodeAckDefaultTypeInternal _SyncNodeAck_default_instance_;
class SyncNodeReq;
class SyncNodeReqDefaultTypeInternal;
extern SyncNodeReqDefaultTypeInternal _SyncNodeReq_default_instance_;
class TransMsgReq;
class TransMsgReqDefaultTypeInternal;
extern TransMsgReqDefaultTypeInternal _TransMsgReq_default_instance_;
class UpdateFeeReq;
class UpdateFeeReqDefaultTypeInternal;
extern UpdateFeeReqDefaultTypeInternal _UpdateFeeReq_default_instance_;
class UpdatePackageFeeReq;
class UpdatePackageFeeReqDefaultTypeInternal;
extern UpdatePackageFeeReqDefaultTypeInternal _UpdatePackageFeeReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BroadcaseMsgReq* Arena::CreateMaybeMessage<::BroadcaseMsgReq>(Arena*);
template<> ::BroadcastNodeReq* Arena::CreateMaybeMessage<::BroadcastNodeReq>(Arena*);
template<> ::ConnectNodeReq* Arena::CreateMaybeMessage<::ConnectNodeReq>(Arena*);
template<> ::EchoAck* Arena::CreateMaybeMessage<::EchoAck>(Arena*);
template<> ::EchoReq* Arena::CreateMaybeMessage<::EchoReq>(Arena*);
template<> ::GetNodeCacheAck* Arena::CreateMaybeMessage<::GetNodeCacheAck>(Arena*);
template<> ::GetNodeCacheReq* Arena::CreateMaybeMessage<::GetNodeCacheReq>(Arena*);
template<> ::GetTransInfoAck* Arena::CreateMaybeMessage<::GetTransInfoAck>(Arena*);
template<> ::GetTransInfoReq* Arena::CreateMaybeMessage<::GetTransInfoReq>(Arena*);
template<> ::NodeCacheItem* Arena::CreateMaybeMessage<::NodeCacheItem>(Arena*);
template<> ::NodeHeightChangedReq* Arena::CreateMaybeMessage<::NodeHeightChangedReq>(Arena*);
template<> ::NodeInfo* Arena::CreateMaybeMessage<::NodeInfo>(Arena*);
template<> ::NotifyConnectReq* Arena::CreateMaybeMessage<::NotifyConnectReq>(Arena*);
template<> ::PingReq* Arena::CreateMaybeMessage<::PingReq>(Arena*);
template<> ::PongReq* Arena::CreateMaybeMessage<::PongReq>(Arena*);
template<> ::PrintMsgReq* Arena::CreateMaybeMessage<::PrintMsgReq>(Arena*);
template<> ::RegisterNodeAck* Arena::CreateMaybeMessage<::RegisterNodeAck>(Arena*);
template<> ::RegisterNodeReq* Arena::CreateMaybeMessage<::RegisterNodeReq>(Arena*);
template<> ::SyncNodeAck* Arena::CreateMaybeMessage<::SyncNodeAck>(Arena*);
template<> ::SyncNodeReq* Arena::CreateMaybeMessage<::SyncNodeReq>(Arena*);
template<> ::TransMsgReq* Arena::CreateMaybeMessage<::TransMsgReq>(Arena*);
template<> ::UpdateFeeReq* Arena::CreateMaybeMessage<::UpdateFeeReq>(Arena*);
template<> ::UpdatePackageFeeReq* Arena::CreateMaybeMessage<::UpdatePackageFeeReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PrintMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrintMsgReq) */ {
 public:
  PrintMsgReq();
  virtual ~PrintMsgReq();

  PrintMsgReq(const PrintMsgReq& from);
  PrintMsgReq(PrintMsgReq&& from) noexcept
    : PrintMsgReq() {
    *this = ::std::move(from);
  }

  inline PrintMsgReq& operator=(const PrintMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintMsgReq& operator=(PrintMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintMsgReq* internal_default_instance() {
    return reinterpret_cast<const PrintMsgReq*>(
               &_PrintMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrintMsgReq& a, PrintMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintMsgReq* New() const final {
    return CreateMaybeMessage<PrintMsgReq>(nullptr);
  }

  PrintMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintMsgReq& from);
  void MergeFrom(const PrintMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrintMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PrintMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubFieldNumber = 1,
    kSignFieldNumber = 2,
    kBase58AddrFieldNumber = 3,
    kPublicBase58AddrFieldNumber = 4,
    kVersionFieldNumber = 13,
    kListenIpFieldNumber = 5,
    kListenPortFieldNumber = 6,
    kPublicIpFieldNumber = 7,
    kPublicPortFieldNumber = 8,
    kIsPublicNodeFieldNumber = 9,
    kHeightFieldNumber = 10,
    kSignFeeFieldNumber = 11,
    kPackageFeeFieldNumber = 12,
  };
  // bytes pub = 1;
  void clear_pub();
  const std::string& pub() const;
  void set_pub(const std::string& value);
  void set_pub(std::string&& value);
  void set_pub(const char* value);
  void set_pub(const void* value, size_t size);
  std::string* mutable_pub();
  std::string* release_pub();
  void set_allocated_pub(std::string* pub);
  private:
  const std::string& _internal_pub() const;
  void _internal_set_pub(const std::string& value);
  std::string* _internal_mutable_pub();
  public:

  // bytes sign = 2;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const void* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // string base58addr = 3;
  void clear_base58addr();
  const std::string& base58addr() const;
  void set_base58addr(const std::string& value);
  void set_base58addr(std::string&& value);
  void set_base58addr(const char* value);
  void set_base58addr(const char* value, size_t size);
  std::string* mutable_base58addr();
  std::string* release_base58addr();
  void set_allocated_base58addr(std::string* base58addr);
  private:
  const std::string& _internal_base58addr() const;
  void _internal_set_base58addr(const std::string& value);
  std::string* _internal_mutable_base58addr();
  public:

  // string public_base58addr = 4;
  void clear_public_base58addr();
  const std::string& public_base58addr() const;
  void set_public_base58addr(const std::string& value);
  void set_public_base58addr(std::string&& value);
  void set_public_base58addr(const char* value);
  void set_public_base58addr(const char* value, size_t size);
  std::string* mutable_public_base58addr();
  std::string* release_public_base58addr();
  void set_allocated_public_base58addr(std::string* public_base58addr);
  private:
  const std::string& _internal_public_base58addr() const;
  void _internal_set_public_base58addr(const std::string& value);
  std::string* _internal_mutable_public_base58addr();
  public:

  // string version = 13;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint32 listen_ip = 5;
  void clear_listen_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 listen_ip() const;
  void set_listen_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_listen_ip() const;
  void _internal_set_listen_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 listen_port = 6;
  void clear_listen_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 listen_port() const;
  void set_listen_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_listen_port() const;
  void _internal_set_listen_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 public_ip = 7;
  void clear_public_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 public_ip() const;
  void set_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_public_ip() const;
  void _internal_set_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 public_port = 8;
  void clear_public_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 public_port() const;
  void set_public_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_public_port() const;
  void _internal_set_public_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_public_node = 9;
  void clear_is_public_node();
  bool is_public_node() const;
  void set_is_public_node(bool value);
  private:
  bool _internal_is_public_node() const;
  void _internal_set_is_public_node(bool value);
  public:

  // uint32 height = 10;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 sign_fee = 11;
  void clear_sign_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 sign_fee() const;
  void set_sign_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sign_fee() const;
  void _internal_set_sign_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 package_fee = 12;
  void clear_package_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 package_fee() const;
  void set_package_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_package_fee() const;
  void _internal_set_package_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NodeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base58addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_base58addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 listen_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 listen_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 public_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 public_port_;
  bool is_public_node_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sign_fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 package_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class RegisterNodeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterNodeReq) */ {
 public:
  RegisterNodeReq();
  virtual ~RegisterNodeReq();

  RegisterNodeReq(const RegisterNodeReq& from);
  RegisterNodeReq(RegisterNodeReq&& from) noexcept
    : RegisterNodeReq() {
    *this = ::std::move(from);
  }

  inline RegisterNodeReq& operator=(const RegisterNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeReq& operator=(RegisterNodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterNodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterNodeReq* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeReq*>(
               &_RegisterNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterNodeReq& a, RegisterNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterNodeReq* New() const final {
    return CreateMaybeMessage<RegisterNodeReq>(nullptr);
  }

  RegisterNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterNodeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterNodeReq& from);
  void MergeFrom(const RegisterNodeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterNodeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMynodeFieldNumber = 1,
    kIsGetNodelistFieldNumber = 2,
  };
  // .NodeInfo mynode = 1;
  bool has_mynode() const;
  private:
  bool _internal_has_mynode() const;
  public:
  void clear_mynode();
  const ::NodeInfo& mynode() const;
  ::NodeInfo* release_mynode();
  ::NodeInfo* mutable_mynode();
  void set_allocated_mynode(::NodeInfo* mynode);
  private:
  const ::NodeInfo& _internal_mynode() const;
  ::NodeInfo* _internal_mutable_mynode();
  public:

  // bool is_get_nodelist = 2;
  void clear_is_get_nodelist();
  bool is_get_nodelist() const;
  void set_is_get_nodelist(bool value);
  private:
  bool _internal_is_get_nodelist() const;
  void _internal_set_is_get_nodelist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterNodeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NodeInfo* mynode_;
  bool is_get_nodelist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class RegisterNodeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterNodeAck) */ {
 public:
  RegisterNodeAck();
  virtual ~RegisterNodeAck();

  RegisterNodeAck(const RegisterNodeAck& from);
  RegisterNodeAck(RegisterNodeAck&& from) noexcept
    : RegisterNodeAck() {
    *this = ::std::move(from);
  }

  inline RegisterNodeAck& operator=(const RegisterNodeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeAck& operator=(RegisterNodeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterNodeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterNodeAck* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeAck*>(
               &_RegisterNodeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterNodeAck& a, RegisterNodeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterNodeAck* New() const final {
    return CreateMaybeMessage<RegisterNodeAck>(nullptr);
  }

  RegisterNodeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterNodeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterNodeAck& from);
  void MergeFrom(const RegisterNodeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterNodeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .NodeInfo nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >*
      mutable_nodes();
  private:
  const ::NodeInfo& _internal_nodes(int index) const;
  ::NodeInfo* _internal_add_nodes();
  public:
  const ::NodeInfo& nodes(int index) const;
  ::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:RegisterNodeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class SyncNodeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncNodeReq) */ {
 public:
  SyncNodeReq();
  virtual ~SyncNodeReq();

  SyncNodeReq(const SyncNodeReq& from);
  SyncNodeReq(SyncNodeReq&& from) noexcept
    : SyncNodeReq() {
    *this = ::std::move(from);
  }

  inline SyncNodeReq& operator=(const SyncNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNodeReq& operator=(SyncNodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncNodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncNodeReq* internal_default_instance() {
    return reinterpret_cast<const SyncNodeReq*>(
               &_SyncNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SyncNodeReq& a, SyncNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNodeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncNodeReq* New() const final {
    return CreateMaybeMessage<SyncNodeReq>(nullptr);
  }

  SyncNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncNodeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncNodeReq& from);
  void MergeFrom(const SyncNodeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNodeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncNodeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kNodesFieldNumber = 2,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated .NodeInfo nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >*
      mutable_nodes();
  private:
  const ::NodeInfo& _internal_nodes(int index) const;
  ::NodeInfo* _internal_add_nodes();
  public:
  const ::NodeInfo& nodes(int index) const;
  ::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:SyncNodeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class SyncNodeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncNodeAck) */ {
 public:
  SyncNodeAck();
  virtual ~SyncNodeAck();

  SyncNodeAck(const SyncNodeAck& from);
  SyncNodeAck(SyncNodeAck&& from) noexcept
    : SyncNodeAck() {
    *this = ::std::move(from);
  }

  inline SyncNodeAck& operator=(const SyncNodeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncNodeAck& operator=(SyncNodeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncNodeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncNodeAck* internal_default_instance() {
    return reinterpret_cast<const SyncNodeAck*>(
               &_SyncNodeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SyncNodeAck& a, SyncNodeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncNodeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncNodeAck* New() const final {
    return CreateMaybeMessage<SyncNodeAck>(nullptr);
  }

  SyncNodeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncNodeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncNodeAck& from);
  void MergeFrom(const SyncNodeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncNodeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncNodeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kIdsFieldNumber = 2,
  };
  // repeated .NodeInfo nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >*
      mutable_nodes();
  private:
  const ::NodeInfo& _internal_nodes(int index) const;
  ::NodeInfo* _internal_add_nodes();
  public:
  const ::NodeInfo& nodes(int index) const;
  ::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >&
      nodes() const;

  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:SyncNodeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class ConnectNodeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectNodeReq) */ {
 public:
  ConnectNodeReq();
  virtual ~ConnectNodeReq();

  ConnectNodeReq(const ConnectNodeReq& from);
  ConnectNodeReq(ConnectNodeReq&& from) noexcept
    : ConnectNodeReq() {
    *this = ::std::move(from);
  }

  inline ConnectNodeReq& operator=(const ConnectNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectNodeReq& operator=(ConnectNodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectNodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectNodeReq* internal_default_instance() {
    return reinterpret_cast<const ConnectNodeReq*>(
               &_ConnectNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConnectNodeReq& a, ConnectNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectNodeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectNodeReq* New() const final {
    return CreateMaybeMessage<ConnectNodeReq>(nullptr);
  }

  ConnectNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectNodeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectNodeReq& from);
  void MergeFrom(const ConnectNodeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectNodeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectNodeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMynodeFieldNumber = 1,
  };
  // .NodeInfo mynode = 1;
  bool has_mynode() const;
  private:
  bool _internal_has_mynode() const;
  public:
  void clear_mynode();
  const ::NodeInfo& mynode() const;
  ::NodeInfo* release_mynode();
  ::NodeInfo* mutable_mynode();
  void set_allocated_mynode(::NodeInfo* mynode);
  private:
  const ::NodeInfo& _internal_mynode() const;
  ::NodeInfo* _internal_mutable_mynode();
  public:

  // @@protoc_insertion_point(class_scope:ConnectNodeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NodeInfo* mynode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class BroadcastNodeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BroadcastNodeReq) */ {
 public:
  BroadcastNodeReq();
  virtual ~BroadcastNodeReq();

  BroadcastNodeReq(const BroadcastNodeReq& from);
  BroadcastNodeReq(BroadcastNodeReq&& from) noexcept
    : BroadcastNodeReq() {
    *this = ::std::move(from);
  }

  inline BroadcastNodeReq& operator=(const BroadcastNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastNodeReq& operator=(BroadcastNodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastNodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastNodeReq* internal_default_instance() {
    return reinterpret_cast<const BroadcastNodeReq*>(
               &_BroadcastNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BroadcastNodeReq& a, BroadcastNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastNodeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastNodeReq* New() const final {
    return CreateMaybeMessage<BroadcastNodeReq>(nullptr);
  }

  BroadcastNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastNodeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastNodeReq& from);
  void MergeFrom(const BroadcastNodeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastNodeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BroadcastNodeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMynodeFieldNumber = 1,
  };
  // .NodeInfo mynode = 1;
  bool has_mynode() const;
  private:
  bool _internal_has_mynode() const;
  public:
  void clear_mynode();
  const ::NodeInfo& mynode() const;
  ::NodeInfo* release_mynode();
  ::NodeInfo* mutable_mynode();
  void set_allocated_mynode(::NodeInfo* mynode);
  private:
  const ::NodeInfo& _internal_mynode() const;
  ::NodeInfo* _internal_mutable_mynode();
  public:

  // @@protoc_insertion_point(class_scope:BroadcastNodeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NodeInfo* mynode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class TransMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgReq) */ {
 public:
  TransMsgReq();
  virtual ~TransMsgReq();

  TransMsgReq(const TransMsgReq& from);
  TransMsgReq(TransMsgReq&& from) noexcept
    : TransMsgReq() {
    *this = ::std::move(from);
  }

  inline TransMsgReq& operator=(const TransMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgReq& operator=(TransMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgReq* internal_default_instance() {
    return reinterpret_cast<const TransMsgReq*>(
               &_TransMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransMsgReq& a, TransMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TransMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransMsgReq* New() const final {
    return CreateMaybeMessage<TransMsgReq>(nullptr);
  }

  TransMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgReq& from);
  void MergeFrom(const TransMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDestFieldNumber = 1,
    kPriorityFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .NodeInfo dest = 1;
  bool has_dest() const;
  private:
  bool _internal_has_dest() const;
  public:
  void clear_dest();
  const ::NodeInfo& dest() const;
  ::NodeInfo* release_dest();
  ::NodeInfo* mutable_dest();
  void set_allocated_dest(::NodeInfo* dest);
  private:
  const ::NodeInfo& _internal_dest() const;
  ::NodeInfo* _internal_mutable_dest();
  public:

  // uint32 priority = 3;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TransMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::NodeInfo* dest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class BroadcaseMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BroadcaseMsgReq) */ {
 public:
  BroadcaseMsgReq();
  virtual ~BroadcaseMsgReq();

  BroadcaseMsgReq(const BroadcaseMsgReq& from);
  BroadcaseMsgReq(BroadcaseMsgReq&& from) noexcept
    : BroadcaseMsgReq() {
    *this = ::std::move(from);
  }

  inline BroadcaseMsgReq& operator=(const BroadcaseMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcaseMsgReq& operator=(BroadcaseMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcaseMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcaseMsgReq* internal_default_instance() {
    return reinterpret_cast<const BroadcaseMsgReq*>(
               &_BroadcaseMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BroadcaseMsgReq& a, BroadcaseMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcaseMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcaseMsgReq* New() const final {
    return CreateMaybeMessage<BroadcaseMsgReq>(nullptr);
  }

  BroadcaseMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcaseMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcaseMsgReq& from);
  void MergeFrom(const BroadcaseMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcaseMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BroadcaseMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kFromFieldNumber = 1,
    kPriorityFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .NodeInfo from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::NodeInfo& from() const;
  ::NodeInfo* release_from();
  ::NodeInfo* mutable_from();
  void set_allocated_from(::NodeInfo* from);
  private:
  const ::NodeInfo& _internal_from() const;
  ::NodeInfo* _internal_mutable_from();
  public:

  // uint32 priority = 3;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BroadcaseMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::NodeInfo* from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class NotifyConnectReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotifyConnectReq) */ {
 public:
  NotifyConnectReq();
  virtual ~NotifyConnectReq();

  NotifyConnectReq(const NotifyConnectReq& from);
  NotifyConnectReq(NotifyConnectReq&& from) noexcept
    : NotifyConnectReq() {
    *this = ::std::move(from);
  }

  inline NotifyConnectReq& operator=(const NotifyConnectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyConnectReq& operator=(NotifyConnectReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotifyConnectReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyConnectReq* internal_default_instance() {
    return reinterpret_cast<const NotifyConnectReq*>(
               &_NotifyConnectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NotifyConnectReq& a, NotifyConnectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyConnectReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyConnectReq* New() const final {
    return CreateMaybeMessage<NotifyConnectReq>(nullptr);
  }

  NotifyConnectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyConnectReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotifyConnectReq& from);
  void MergeFrom(const NotifyConnectReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyConnectReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotifyConnectReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNodeFieldNumber = 1,
    kClientNodeFieldNumber = 2,
  };
  // .NodeInfo server_node = 1;
  bool has_server_node() const;
  private:
  bool _internal_has_server_node() const;
  public:
  void clear_server_node();
  const ::NodeInfo& server_node() const;
  ::NodeInfo* release_server_node();
  ::NodeInfo* mutable_server_node();
  void set_allocated_server_node(::NodeInfo* server_node);
  private:
  const ::NodeInfo& _internal_server_node() const;
  ::NodeInfo* _internal_mutable_server_node();
  public:

  // .NodeInfo client_node = 2;
  bool has_client_node() const;
  private:
  bool _internal_has_client_node() const;
  public:
  void clear_client_node();
  const ::NodeInfo& client_node() const;
  ::NodeInfo* release_client_node();
  ::NodeInfo* mutable_client_node();
  void set_allocated_client_node(::NodeInfo* client_node);
  private:
  const ::NodeInfo& _internal_client_node() const;
  ::NodeInfo* _internal_mutable_client_node();
  public:

  // @@protoc_insertion_point(class_scope:NotifyConnectReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NodeInfo* server_node_;
  ::NodeInfo* client_node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PingReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PingReq) */ {
 public:
  PingReq();
  virtual ~PingReq();

  PingReq(const PingReq& from);
  PingReq(PingReq&& from) noexcept
    : PingReq() {
    *this = ::std::move(from);
  }

  inline PingReq& operator=(const PingReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingReq& operator=(PingReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingReq* internal_default_instance() {
    return reinterpret_cast<const PingReq*>(
               &_PingReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PingReq& a, PingReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PingReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingReq* New() const final {
    return CreateMaybeMessage<PingReq>(nullptr);
  }

  PingReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingReq& from);
  void MergeFrom(const PingReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PingReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:PingReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PongReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PongReq) */ {
 public:
  PongReq();
  virtual ~PongReq();

  PongReq(const PongReq& from);
  PongReq(PongReq&& from) noexcept
    : PongReq() {
    *this = ::std::move(from);
  }

  inline PongReq& operator=(const PongReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongReq& operator=(PongReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PongReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongReq* internal_default_instance() {
    return reinterpret_cast<const PongReq*>(
               &_PongReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PongReq& a, PongReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PongReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PongReq* New() const final {
    return CreateMaybeMessage<PongReq>(nullptr);
  }

  PongReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PongReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PongReq& from);
  void MergeFrom(const PongReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PongReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kChainHeightFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 chain_height = 2;
  void clear_chain_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_height() const;
  void set_chain_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chain_height() const;
  void _internal_set_chain_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PongReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class EchoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EchoReq) */ {
 public:
  EchoReq();
  virtual ~EchoReq();

  EchoReq(const EchoReq& from);
  EchoReq(EchoReq&& from) noexcept
    : EchoReq() {
    *this = ::std::move(from);
  }

  inline EchoReq& operator=(const EchoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoReq& operator=(EchoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoReq* internal_default_instance() {
    return reinterpret_cast<const EchoReq*>(
               &_EchoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EchoReq& a, EchoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoReq* New() const final {
    return CreateMaybeMessage<EchoReq>(nullptr);
  }

  EchoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoReq& from);
  void MergeFrom(const EchoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EchoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:EchoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class EchoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EchoAck) */ {
 public:
  EchoAck();
  virtual ~EchoAck();

  EchoAck(const EchoAck& from);
  EchoAck(EchoAck&& from) noexcept
    : EchoAck() {
    *this = ::std::move(from);
  }

  inline EchoAck& operator=(const EchoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoAck& operator=(EchoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoAck* internal_default_instance() {
    return reinterpret_cast<const EchoAck*>(
               &_EchoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EchoAck& a, EchoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoAck* New() const final {
    return CreateMaybeMessage<EchoAck>(nullptr);
  }

  EchoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoAck& from);
  void MergeFrom(const EchoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EchoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:EchoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UpdateFeeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateFeeReq) */ {
 public:
  UpdateFeeReq();
  virtual ~UpdateFeeReq();

  UpdateFeeReq(const UpdateFeeReq& from);
  UpdateFeeReq(UpdateFeeReq&& from) noexcept
    : UpdateFeeReq() {
    *this = ::std::move(from);
  }

  inline UpdateFeeReq& operator=(const UpdateFeeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFeeReq& operator=(UpdateFeeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFeeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFeeReq* internal_default_instance() {
    return reinterpret_cast<const UpdateFeeReq*>(
               &_UpdateFeeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateFeeReq& a, UpdateFeeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFeeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFeeReq* New() const final {
    return CreateMaybeMessage<UpdateFeeReq>(nullptr);
  }

  UpdateFeeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFeeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFeeReq& from);
  void MergeFrom(const UpdateFeeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFeeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateFeeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFeeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 fee = 2;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:UpdateFeeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UpdatePackageFeeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdatePackageFeeReq) */ {
 public:
  UpdatePackageFeeReq();
  virtual ~UpdatePackageFeeReq();

  UpdatePackageFeeReq(const UpdatePackageFeeReq& from);
  UpdatePackageFeeReq(UpdatePackageFeeReq&& from) noexcept
    : UpdatePackageFeeReq() {
    *this = ::std::move(from);
  }

  inline UpdatePackageFeeReq& operator=(const UpdatePackageFeeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePackageFeeReq& operator=(UpdatePackageFeeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePackageFeeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePackageFeeReq* internal_default_instance() {
    return reinterpret_cast<const UpdatePackageFeeReq*>(
               &_UpdatePackageFeeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdatePackageFeeReq& a, UpdatePackageFeeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePackageFeeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePackageFeeReq* New() const final {
    return CreateMaybeMessage<UpdatePackageFeeReq>(nullptr);
  }

  UpdatePackageFeeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePackageFeeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePackageFeeReq& from);
  void MergeFrom(const UpdatePackageFeeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePackageFeeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdatePackageFeeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPackageFeeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 package_fee = 2;
  void clear_package_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 package_fee() const;
  void set_package_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_package_fee() const;
  void _internal_set_package_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:UpdatePackageFeeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 package_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class GetNodeCacheReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetNodeCacheReq) */ {
 public:
  GetNodeCacheReq();
  virtual ~GetNodeCacheReq();

  GetNodeCacheReq(const GetNodeCacheReq& from);
  GetNodeCacheReq(GetNodeCacheReq&& from) noexcept
    : GetNodeCacheReq() {
    *this = ::std::move(from);
  }

  inline GetNodeCacheReq& operator=(const GetNodeCacheReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeCacheReq& operator=(GetNodeCacheReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeCacheReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeCacheReq* internal_default_instance() {
    return reinterpret_cast<const GetNodeCacheReq*>(
               &_GetNodeCacheReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetNodeCacheReq& a, GetNodeCacheReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeCacheReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeCacheReq* New() const final {
    return CreateMaybeMessage<GetNodeCacheReq>(nullptr);
  }

  GetNodeCacheReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeCacheReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeCacheReq& from);
  void MergeFrom(const GetNodeCacheReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeCacheReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetNodeCacheReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIsFetchPublicFieldNumber = 2,
    kNodeHeightFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool is_fetch_public = 2;
  void clear_is_fetch_public();
  bool is_fetch_public() const;
  void set_is_fetch_public(bool value);
  private:
  bool _internal_is_fetch_public() const;
  void _internal_set_is_fetch_public(bool value);
  public:

  // uint32 node_height = 3;
  void clear_node_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_height() const;
  void set_node_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_height() const;
  void _internal_set_node_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetNodeCacheReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool is_fetch_public_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class NodeCacheItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeCacheItem) */ {
 public:
  NodeCacheItem();
  virtual ~NodeCacheItem();

  NodeCacheItem(const NodeCacheItem& from);
  NodeCacheItem(NodeCacheItem&& from) noexcept
    : NodeCacheItem() {
    *this = ::std::move(from);
  }

  inline NodeCacheItem& operator=(const NodeCacheItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeCacheItem& operator=(NodeCacheItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeCacheItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeCacheItem* internal_default_instance() {
    return reinterpret_cast<const NodeCacheItem*>(
               &_NodeCacheItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(NodeCacheItem& a, NodeCacheItem& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeCacheItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeCacheItem* New() const final {
    return CreateMaybeMessage<NodeCacheItem>(nullptr);
  }

  NodeCacheItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeCacheItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeCacheItem& from);
  void MergeFrom(const NodeCacheItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeCacheItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeCacheItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBase58AddrFieldNumber = 1,
    kFeeFieldNumber = 3,
    kHeightFieldNumber = 2,
    kIsPublicFieldNumber = 4,
  };
  // string base58addr = 1;
  void clear_base58addr();
  const std::string& base58addr() const;
  void set_base58addr(const std::string& value);
  void set_base58addr(std::string&& value);
  void set_base58addr(const char* value);
  void set_base58addr(const char* value, size_t size);
  std::string* mutable_base58addr();
  std::string* release_base58addr();
  void set_allocated_base58addr(std::string* base58addr);
  private:
  const std::string& _internal_base58addr() const;
  void _internal_set_base58addr(const std::string& value);
  std::string* _internal_mutable_base58addr();
  public:

  // uint64 fee = 3;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_public = 4;
  void clear_is_public();
  bool is_public() const;
  void set_is_public(bool value);
  private:
  bool _internal_is_public() const;
  void _internal_set_is_public(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NodeCacheItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base58addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  bool is_public_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class GetNodeCacheAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetNodeCacheAck) */ {
 public:
  GetNodeCacheAck();
  virtual ~GetNodeCacheAck();

  GetNodeCacheAck(const GetNodeCacheAck& from);
  GetNodeCacheAck(GetNodeCacheAck&& from) noexcept
    : GetNodeCacheAck() {
    *this = ::std::move(from);
  }

  inline GetNodeCacheAck& operator=(const GetNodeCacheAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeCacheAck& operator=(GetNodeCacheAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeCacheAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeCacheAck* internal_default_instance() {
    return reinterpret_cast<const GetNodeCacheAck*>(
               &_GetNodeCacheAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetNodeCacheAck& a, GetNodeCacheAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeCacheAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeCacheAck* New() const final {
    return CreateMaybeMessage<GetNodeCacheAck>(nullptr);
  }

  GetNodeCacheAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeCacheAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeCacheAck& from);
  void MergeFrom(const GetNodeCacheAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeCacheAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetNodeCacheAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesHeightFieldNumber = 1,
    kPublicNodesFieldNumber = 2,
  };
  // repeated .NodeCacheItem nodes_height = 1;
  int nodes_height_size() const;
  private:
  int _internal_nodes_height_size() const;
  public:
  void clear_nodes_height();
  ::NodeCacheItem* mutable_nodes_height(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeCacheItem >*
      mutable_nodes_height();
  private:
  const ::NodeCacheItem& _internal_nodes_height(int index) const;
  ::NodeCacheItem* _internal_add_nodes_height();
  public:
  const ::NodeCacheItem& nodes_height(int index) const;
  ::NodeCacheItem* add_nodes_height();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeCacheItem >&
      nodes_height() const;

  // repeated .NodeInfo public_nodes = 2;
  int public_nodes_size() const;
  private:
  int _internal_public_nodes_size() const;
  public:
  void clear_public_nodes();
  ::NodeInfo* mutable_public_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >*
      mutable_public_nodes();
  private:
  const ::NodeInfo& _internal_public_nodes(int index) const;
  ::NodeInfo* _internal_add_public_nodes();
  public:
  const ::NodeInfo& public_nodes(int index) const;
  ::NodeInfo* add_public_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >&
      public_nodes() const;

  // @@protoc_insertion_point(class_scope:GetNodeCacheAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeCacheItem > nodes_height_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo > public_nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class GetTransInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTransInfoReq) */ {
 public:
  GetTransInfoReq();
  virtual ~GetTransInfoReq();

  GetTransInfoReq(const GetTransInfoReq& from);
  GetTransInfoReq(GetTransInfoReq&& from) noexcept
    : GetTransInfoReq() {
    *this = ::std::move(from);
  }

  inline GetTransInfoReq& operator=(const GetTransInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransInfoReq& operator=(GetTransInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetTransInfoReq*>(
               &_GetTransInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetTransInfoReq& a, GetTransInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransInfoReq* New() const final {
    return CreateMaybeMessage<GetTransInfoReq>(nullptr);
  }

  GetTransInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransInfoReq& from);
  void MergeFrom(const GetTransInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTransInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
    kNodeidFieldNumber = 2,
  };
  // string txid = 1;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const char* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);
  private:
  const std::string& _internal_txid() const;
  void _internal_set_txid(const std::string& value);
  std::string* _internal_mutable_txid();
  public:

  // string nodeid = 2;
  void clear_nodeid();
  const std::string& nodeid() const;
  void set_nodeid(const std::string& value);
  void set_nodeid(std::string&& value);
  void set_nodeid(const char* value);
  void set_nodeid(const char* value, size_t size);
  std::string* mutable_nodeid();
  std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);
  private:
  const std::string& _internal_nodeid() const;
  void _internal_set_nodeid(const std::string& value);
  std::string* _internal_mutable_nodeid();
  public:

  // @@protoc_insertion_point(class_scope:GetTransInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class GetTransInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTransInfoAck) */ {
 public:
  GetTransInfoAck();
  virtual ~GetTransInfoAck();

  GetTransInfoAck(const GetTransInfoAck& from);
  GetTransInfoAck(GetTransInfoAck&& from) noexcept
    : GetTransInfoAck() {
    *this = ::std::move(from);
  }

  inline GetTransInfoAck& operator=(const GetTransInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransInfoAck& operator=(GetTransInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransInfoAck* internal_default_instance() {
    return reinterpret_cast<const GetTransInfoAck*>(
               &_GetTransInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetTransInfoAck& a, GetTransInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransInfoAck* New() const final {
    return CreateMaybeMessage<GetTransInfoAck>(nullptr);
  }

  GetTransInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransInfoAck& from);
  void MergeFrom(const GetTransInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTransInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // .CTransaction trans = 1;
  bool has_trans() const;
  private:
  bool _internal_has_trans() const;
  public:
  void clear_trans();
  const ::CTransaction& trans() const;
  ::CTransaction* release_trans();
  ::CTransaction* mutable_trans();
  void set_allocated_trans(::CTransaction* trans);
  private:
  const ::CTransaction& _internal_trans() const;
  ::CTransaction* _internal_mutable_trans();
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetTransInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CTransaction* trans_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class NodeHeightChangedReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeHeightChangedReq) */ {
 public:
  NodeHeightChangedReq();
  virtual ~NodeHeightChangedReq();

  NodeHeightChangedReq(const NodeHeightChangedReq& from);
  NodeHeightChangedReq(NodeHeightChangedReq&& from) noexcept
    : NodeHeightChangedReq() {
    *this = ::std::move(from);
  }

  inline NodeHeightChangedReq& operator=(const NodeHeightChangedReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeHeightChangedReq& operator=(NodeHeightChangedReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeHeightChangedReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeHeightChangedReq* internal_default_instance() {
    return reinterpret_cast<const NodeHeightChangedReq*>(
               &_NodeHeightChangedReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(NodeHeightChangedReq& a, NodeHeightChangedReq& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeHeightChangedReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeHeightChangedReq* New() const final {
    return CreateMaybeMessage<NodeHeightChangedReq>(nullptr);
  }

  NodeHeightChangedReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeHeightChangedReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeHeightChangedReq& from);
  void MergeFrom(const NodeHeightChangedReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeHeightChangedReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeHeightChangedReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:NodeHeightChangedReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrintMsgReq

// string data = 1;
inline void PrintMsgReq::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PrintMsgReq::data() const {
  // @@protoc_insertion_point(field_get:PrintMsgReq.data)
  return _internal_data();
}
inline void PrintMsgReq::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:PrintMsgReq.data)
}
inline std::string* PrintMsgReq::mutable_data() {
  // @@protoc_insertion_point(field_mutable:PrintMsgReq.data)
  return _internal_mutable_data();
}
inline const std::string& PrintMsgReq::_internal_data() const {
  return data_.GetNoArena();
}
inline void PrintMsgReq::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PrintMsgReq::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PrintMsgReq.data)
}
inline void PrintMsgReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrintMsgReq.data)
}
inline void PrintMsgReq::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrintMsgReq.data)
}
inline std::string* PrintMsgReq::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrintMsgReq::release_data() {
  // @@protoc_insertion_point(field_release:PrintMsgReq.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrintMsgReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:PrintMsgReq.data)
}

// int32 type = 2;
inline void PrintMsgReq::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintMsgReq::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintMsgReq::type() const {
  // @@protoc_insertion_point(field_get:PrintMsgReq.type)
  return _internal_type();
}
inline void PrintMsgReq::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PrintMsgReq::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PrintMsgReq.type)
}

// -------------------------------------------------------------------

// NodeInfo

// bytes pub = 1;
inline void NodeInfo::clear_pub() {
  pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::pub() const {
  // @@protoc_insertion_point(field_get:NodeInfo.pub)
  return _internal_pub();
}
inline void NodeInfo::set_pub(const std::string& value) {
  _internal_set_pub(value);
  // @@protoc_insertion_point(field_set:NodeInfo.pub)
}
inline std::string* NodeInfo::mutable_pub() {
  // @@protoc_insertion_point(field_mutable:NodeInfo.pub)
  return _internal_mutable_pub();
}
inline const std::string& NodeInfo::_internal_pub() const {
  return pub_.GetNoArena();
}
inline void NodeInfo::_internal_set_pub(const std::string& value) {
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfo::set_pub(std::string&& value) {
  
  pub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.pub)
}
inline void NodeInfo::set_pub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.pub)
}
inline void NodeInfo::set_pub(const void* value, size_t size) {
  
  pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.pub)
}
inline std::string* NodeInfo::_internal_mutable_pub() {
  
  return pub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_pub() {
  // @@protoc_insertion_point(field_release:NodeInfo.pub)
  
  return pub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_pub(std::string* pub) {
  if (pub != nullptr) {
    
  } else {
    
  }
  pub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.pub)
}

// bytes sign = 2;
inline void NodeInfo::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::sign() const {
  // @@protoc_insertion_point(field_get:NodeInfo.sign)
  return _internal_sign();
}
inline void NodeInfo::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:NodeInfo.sign)
}
inline std::string* NodeInfo::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:NodeInfo.sign)
  return _internal_mutable_sign();
}
inline const std::string& NodeInfo::_internal_sign() const {
  return sign_.GetNoArena();
}
inline void NodeInfo::_internal_set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfo::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.sign)
}
inline void NodeInfo::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.sign)
}
inline void NodeInfo::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.sign)
}
inline std::string* NodeInfo::_internal_mutable_sign() {
  
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_sign() {
  // @@protoc_insertion_point(field_release:NodeInfo.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.sign)
}

// string base58addr = 3;
inline void NodeInfo::clear_base58addr() {
  base58addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::base58addr() const {
  // @@protoc_insertion_point(field_get:NodeInfo.base58addr)
  return _internal_base58addr();
}
inline void NodeInfo::set_base58addr(const std::string& value) {
  _internal_set_base58addr(value);
  // @@protoc_insertion_point(field_set:NodeInfo.base58addr)
}
inline std::string* NodeInfo::mutable_base58addr() {
  // @@protoc_insertion_point(field_mutable:NodeInfo.base58addr)
  return _internal_mutable_base58addr();
}
inline const std::string& NodeInfo::_internal_base58addr() const {
  return base58addr_.GetNoArena();
}
inline void NodeInfo::_internal_set_base58addr(const std::string& value) {
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfo::set_base58addr(std::string&& value) {
  
  base58addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.base58addr)
}
inline void NodeInfo::set_base58addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.base58addr)
}
inline void NodeInfo::set_base58addr(const char* value, size_t size) {
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.base58addr)
}
inline std::string* NodeInfo::_internal_mutable_base58addr() {
  
  return base58addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_base58addr() {
  // @@protoc_insertion_point(field_release:NodeInfo.base58addr)
  
  return base58addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_base58addr(std::string* base58addr) {
  if (base58addr != nullptr) {
    
  } else {
    
  }
  base58addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base58addr);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.base58addr)
}

// string public_base58addr = 4;
inline void NodeInfo::clear_public_base58addr() {
  public_base58addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::public_base58addr() const {
  // @@protoc_insertion_point(field_get:NodeInfo.public_base58addr)
  return _internal_public_base58addr();
}
inline void NodeInfo::set_public_base58addr(const std::string& value) {
  _internal_set_public_base58addr(value);
  // @@protoc_insertion_point(field_set:NodeInfo.public_base58addr)
}
inline std::string* NodeInfo::mutable_public_base58addr() {
  // @@protoc_insertion_point(field_mutable:NodeInfo.public_base58addr)
  return _internal_mutable_public_base58addr();
}
inline const std::string& NodeInfo::_internal_public_base58addr() const {
  return public_base58addr_.GetNoArena();
}
inline void NodeInfo::_internal_set_public_base58addr(const std::string& value) {
  
  public_base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfo::set_public_base58addr(std::string&& value) {
  
  public_base58addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.public_base58addr)
}
inline void NodeInfo::set_public_base58addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.public_base58addr)
}
inline void NodeInfo::set_public_base58addr(const char* value, size_t size) {
  
  public_base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.public_base58addr)
}
inline std::string* NodeInfo::_internal_mutable_public_base58addr() {
  
  return public_base58addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_public_base58addr() {
  // @@protoc_insertion_point(field_release:NodeInfo.public_base58addr)
  
  return public_base58addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_public_base58addr(std::string* public_base58addr) {
  if (public_base58addr != nullptr) {
    
  } else {
    
  }
  public_base58addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_base58addr);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.public_base58addr)
}

// uint32 listen_ip = 5;
inline void NodeInfo::clear_listen_ip() {
  listen_ip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::_internal_listen_ip() const {
  return listen_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::listen_ip() const {
  // @@protoc_insertion_point(field_get:NodeInfo.listen_ip)
  return _internal_listen_ip();
}
inline void NodeInfo::_internal_set_listen_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  listen_ip_ = value;
}
inline void NodeInfo::set_listen_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_listen_ip(value);
  // @@protoc_insertion_point(field_set:NodeInfo.listen_ip)
}

// uint32 listen_port = 6;
inline void NodeInfo::clear_listen_port() {
  listen_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::_internal_listen_port() const {
  return listen_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::listen_port() const {
  // @@protoc_insertion_point(field_get:NodeInfo.listen_port)
  return _internal_listen_port();
}
inline void NodeInfo::_internal_set_listen_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  listen_port_ = value;
}
inline void NodeInfo::set_listen_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_listen_port(value);
  // @@protoc_insertion_point(field_set:NodeInfo.listen_port)
}

// uint32 public_ip = 7;
inline void NodeInfo::clear_public_ip() {
  public_ip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::_internal_public_ip() const {
  return public_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:NodeInfo.public_ip)
  return _internal_public_ip();
}
inline void NodeInfo::_internal_set_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  public_ip_ = value;
}
inline void NodeInfo::set_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_public_ip(value);
  // @@protoc_insertion_point(field_set:NodeInfo.public_ip)
}

// uint32 public_port = 8;
inline void NodeInfo::clear_public_port() {
  public_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::_internal_public_port() const {
  return public_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::public_port() const {
  // @@protoc_insertion_point(field_get:NodeInfo.public_port)
  return _internal_public_port();
}
inline void NodeInfo::_internal_set_public_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  public_port_ = value;
}
inline void NodeInfo::set_public_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:NodeInfo.public_port)
}

// bool is_public_node = 9;
inline void NodeInfo::clear_is_public_node() {
  is_public_node_ = false;
}
inline bool NodeInfo::_internal_is_public_node() const {
  return is_public_node_;
}
inline bool NodeInfo::is_public_node() const {
  // @@protoc_insertion_point(field_get:NodeInfo.is_public_node)
  return _internal_is_public_node();
}
inline void NodeInfo::_internal_set_is_public_node(bool value) {
  
  is_public_node_ = value;
}
inline void NodeInfo::set_is_public_node(bool value) {
  _internal_set_is_public_node(value);
  // @@protoc_insertion_point(field_set:NodeInfo.is_public_node)
}

// uint32 height = 10;
inline void NodeInfo::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::height() const {
  // @@protoc_insertion_point(field_get:NodeInfo.height)
  return _internal_height();
}
inline void NodeInfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void NodeInfo::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:NodeInfo.height)
}

// uint64 sign_fee = 11;
inline void NodeInfo::clear_sign_fee() {
  sign_fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo::_internal_sign_fee() const {
  return sign_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo::sign_fee() const {
  // @@protoc_insertion_point(field_get:NodeInfo.sign_fee)
  return _internal_sign_fee();
}
inline void NodeInfo::_internal_set_sign_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sign_fee_ = value;
}
inline void NodeInfo::set_sign_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sign_fee(value);
  // @@protoc_insertion_point(field_set:NodeInfo.sign_fee)
}

// uint64 package_fee = 12;
inline void NodeInfo::clear_package_fee() {
  package_fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo::_internal_package_fee() const {
  return package_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo::package_fee() const {
  // @@protoc_insertion_point(field_get:NodeInfo.package_fee)
  return _internal_package_fee();
}
inline void NodeInfo::_internal_set_package_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  package_fee_ = value;
}
inline void NodeInfo::set_package_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_package_fee(value);
  // @@protoc_insertion_point(field_set:NodeInfo.package_fee)
}

// string version = 13;
inline void NodeInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::version() const {
  // @@protoc_insertion_point(field_get:NodeInfo.version)
  return _internal_version();
}
inline void NodeInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:NodeInfo.version)
}
inline std::string* NodeInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:NodeInfo.version)
  return _internal_mutable_version();
}
inline const std::string& NodeInfo::_internal_version() const {
  return version_.GetNoArena();
}
inline void NodeInfo::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfo::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfo.version)
}
inline void NodeInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfo.version)
}
inline void NodeInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfo.version)
}
inline std::string* NodeInfo::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_version() {
  // @@protoc_insertion_point(field_release:NodeInfo.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:NodeInfo.version)
}

// -------------------------------------------------------------------

// RegisterNodeReq

// .NodeInfo mynode = 1;
inline bool RegisterNodeReq::_internal_has_mynode() const {
  return this != internal_default_instance() && mynode_ != nullptr;
}
inline bool RegisterNodeReq::has_mynode() const {
  return _internal_has_mynode();
}
inline void RegisterNodeReq::clear_mynode() {
  if (GetArenaNoVirtual() == nullptr && mynode_ != nullptr) {
    delete mynode_;
  }
  mynode_ = nullptr;
}
inline const ::NodeInfo& RegisterNodeReq::_internal_mynode() const {
  const ::NodeInfo* p = mynode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeInfo*>(
      &::_NodeInfo_default_instance_);
}
inline const ::NodeInfo& RegisterNodeReq::mynode() const {
  // @@protoc_insertion_point(field_get:RegisterNodeReq.mynode)
  return _internal_mynode();
}
inline ::NodeInfo* RegisterNodeReq::release_mynode() {
  // @@protoc_insertion_point(field_release:RegisterNodeReq.mynode)
  
  ::NodeInfo* temp = mynode_;
  mynode_ = nullptr;
  return temp;
}
inline ::NodeInfo* RegisterNodeReq::_internal_mutable_mynode() {
  
  if (mynode_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeInfo>(GetArenaNoVirtual());
    mynode_ = p;
  }
  return mynode_;
}
inline ::NodeInfo* RegisterNodeReq::mutable_mynode() {
  // @@protoc_insertion_point(field_mutable:RegisterNodeReq.mynode)
  return _internal_mutable_mynode();
}
inline void RegisterNodeReq::set_allocated_mynode(::NodeInfo* mynode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mynode_;
  }
  if (mynode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mynode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mynode, submessage_arena);
    }
    
  } else {
    
  }
  mynode_ = mynode;
  // @@protoc_insertion_point(field_set_allocated:RegisterNodeReq.mynode)
}

// bool is_get_nodelist = 2;
inline void RegisterNodeReq::clear_is_get_nodelist() {
  is_get_nodelist_ = false;
}
inline bool RegisterNodeReq::_internal_is_get_nodelist() const {
  return is_get_nodelist_;
}
inline bool RegisterNodeReq::is_get_nodelist() const {
  // @@protoc_insertion_point(field_get:RegisterNodeReq.is_get_nodelist)
  return _internal_is_get_nodelist();
}
inline void RegisterNodeReq::_internal_set_is_get_nodelist(bool value) {
  
  is_get_nodelist_ = value;
}
inline void RegisterNodeReq::set_is_get_nodelist(bool value) {
  _internal_set_is_get_nodelist(value);
  // @@protoc_insertion_point(field_set:RegisterNodeReq.is_get_nodelist)
}

// -------------------------------------------------------------------

// RegisterNodeAck

// repeated .NodeInfo nodes = 1;
inline int RegisterNodeAck::_internal_nodes_size() const {
  return nodes_.size();
}
inline int RegisterNodeAck::nodes_size() const {
  return _internal_nodes_size();
}
inline void RegisterNodeAck::clear_nodes() {
  nodes_.Clear();
}
inline ::NodeInfo* RegisterNodeAck::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:RegisterNodeAck.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >*
RegisterNodeAck::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:RegisterNodeAck.nodes)
  return &nodes_;
}
inline const ::NodeInfo& RegisterNodeAck::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::NodeInfo& RegisterNodeAck::nodes(int index) const {
  // @@protoc_insertion_point(field_get:RegisterNodeAck.nodes)
  return _internal_nodes(index);
}
inline ::NodeInfo* RegisterNodeAck::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::NodeInfo* RegisterNodeAck::add_nodes() {
  // @@protoc_insertion_point(field_add:RegisterNodeAck.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >&
RegisterNodeAck::nodes() const {
  // @@protoc_insertion_point(field_list:RegisterNodeAck.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// SyncNodeReq

// repeated string ids = 1;
inline int SyncNodeReq::_internal_ids_size() const {
  return ids_.size();
}
inline int SyncNodeReq::ids_size() const {
  return _internal_ids_size();
}
inline void SyncNodeReq::clear_ids() {
  ids_.Clear();
}
inline std::string* SyncNodeReq::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:SyncNodeReq.ids)
  return _internal_add_ids();
}
inline const std::string& SyncNodeReq::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& SyncNodeReq::ids(int index) const {
  // @@protoc_insertion_point(field_get:SyncNodeReq.ids)
  return _internal_ids(index);
}
inline std::string* SyncNodeReq::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:SyncNodeReq.ids)
  return ids_.Mutable(index);
}
inline void SyncNodeReq::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SyncNodeReq.ids)
  ids_.Mutable(index)->assign(value);
}
inline void SyncNodeReq::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SyncNodeReq.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void SyncNodeReq::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncNodeReq.ids)
}
inline void SyncNodeReq::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncNodeReq.ids)
}
inline std::string* SyncNodeReq::_internal_add_ids() {
  return ids_.Add();
}
inline void SyncNodeReq::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncNodeReq.ids)
}
inline void SyncNodeReq::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncNodeReq.ids)
}
inline void SyncNodeReq::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncNodeReq.ids)
}
inline void SyncNodeReq::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncNodeReq.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncNodeReq::ids() const {
  // @@protoc_insertion_point(field_list:SyncNodeReq.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncNodeReq::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:SyncNodeReq.ids)
  return &ids_;
}

// repeated .NodeInfo nodes = 2;
inline int SyncNodeReq::_internal_nodes_size() const {
  return nodes_.size();
}
inline int SyncNodeReq::nodes_size() const {
  return _internal_nodes_size();
}
inline void SyncNodeReq::clear_nodes() {
  nodes_.Clear();
}
inline ::NodeInfo* SyncNodeReq::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:SyncNodeReq.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >*
SyncNodeReq::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:SyncNodeReq.nodes)
  return &nodes_;
}
inline const ::NodeInfo& SyncNodeReq::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::NodeInfo& SyncNodeReq::nodes(int index) const {
  // @@protoc_insertion_point(field_get:SyncNodeReq.nodes)
  return _internal_nodes(index);
}
inline ::NodeInfo* SyncNodeReq::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::NodeInfo* SyncNodeReq::add_nodes() {
  // @@protoc_insertion_point(field_add:SyncNodeReq.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >&
SyncNodeReq::nodes() const {
  // @@protoc_insertion_point(field_list:SyncNodeReq.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// SyncNodeAck

// repeated .NodeInfo nodes = 1;
inline int SyncNodeAck::_internal_nodes_size() const {
  return nodes_.size();
}
inline int SyncNodeAck::nodes_size() const {
  return _internal_nodes_size();
}
inline void SyncNodeAck::clear_nodes() {
  nodes_.Clear();
}
inline ::NodeInfo* SyncNodeAck::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:SyncNodeAck.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >*
SyncNodeAck::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:SyncNodeAck.nodes)
  return &nodes_;
}
inline const ::NodeInfo& SyncNodeAck::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::NodeInfo& SyncNodeAck::nodes(int index) const {
  // @@protoc_insertion_point(field_get:SyncNodeAck.nodes)
  return _internal_nodes(index);
}
inline ::NodeInfo* SyncNodeAck::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::NodeInfo* SyncNodeAck::add_nodes() {
  // @@protoc_insertion_point(field_add:SyncNodeAck.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >&
SyncNodeAck::nodes() const {
  // @@protoc_insertion_point(field_list:SyncNodeAck.nodes)
  return nodes_;
}

// repeated string ids = 2;
inline int SyncNodeAck::_internal_ids_size() const {
  return ids_.size();
}
inline int SyncNodeAck::ids_size() const {
  return _internal_ids_size();
}
inline void SyncNodeAck::clear_ids() {
  ids_.Clear();
}
inline std::string* SyncNodeAck::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:SyncNodeAck.ids)
  return _internal_add_ids();
}
inline const std::string& SyncNodeAck::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& SyncNodeAck::ids(int index) const {
  // @@protoc_insertion_point(field_get:SyncNodeAck.ids)
  return _internal_ids(index);
}
inline std::string* SyncNodeAck::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:SyncNodeAck.ids)
  return ids_.Mutable(index);
}
inline void SyncNodeAck::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SyncNodeAck.ids)
  ids_.Mutable(index)->assign(value);
}
inline void SyncNodeAck::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SyncNodeAck.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void SyncNodeAck::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncNodeAck.ids)
}
inline void SyncNodeAck::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncNodeAck.ids)
}
inline std::string* SyncNodeAck::_internal_add_ids() {
  return ids_.Add();
}
inline void SyncNodeAck::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncNodeAck.ids)
}
inline void SyncNodeAck::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncNodeAck.ids)
}
inline void SyncNodeAck::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncNodeAck.ids)
}
inline void SyncNodeAck::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncNodeAck.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncNodeAck::ids() const {
  // @@protoc_insertion_point(field_list:SyncNodeAck.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncNodeAck::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:SyncNodeAck.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// ConnectNodeReq

// .NodeInfo mynode = 1;
inline bool ConnectNodeReq::_internal_has_mynode() const {
  return this != internal_default_instance() && mynode_ != nullptr;
}
inline bool ConnectNodeReq::has_mynode() const {
  return _internal_has_mynode();
}
inline void ConnectNodeReq::clear_mynode() {
  if (GetArenaNoVirtual() == nullptr && mynode_ != nullptr) {
    delete mynode_;
  }
  mynode_ = nullptr;
}
inline const ::NodeInfo& ConnectNodeReq::_internal_mynode() const {
  const ::NodeInfo* p = mynode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeInfo*>(
      &::_NodeInfo_default_instance_);
}
inline const ::NodeInfo& ConnectNodeReq::mynode() const {
  // @@protoc_insertion_point(field_get:ConnectNodeReq.mynode)
  return _internal_mynode();
}
inline ::NodeInfo* ConnectNodeReq::release_mynode() {
  // @@protoc_insertion_point(field_release:ConnectNodeReq.mynode)
  
  ::NodeInfo* temp = mynode_;
  mynode_ = nullptr;
  return temp;
}
inline ::NodeInfo* ConnectNodeReq::_internal_mutable_mynode() {
  
  if (mynode_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeInfo>(GetArenaNoVirtual());
    mynode_ = p;
  }
  return mynode_;
}
inline ::NodeInfo* ConnectNodeReq::mutable_mynode() {
  // @@protoc_insertion_point(field_mutable:ConnectNodeReq.mynode)
  return _internal_mutable_mynode();
}
inline void ConnectNodeReq::set_allocated_mynode(::NodeInfo* mynode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mynode_;
  }
  if (mynode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mynode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mynode, submessage_arena);
    }
    
  } else {
    
  }
  mynode_ = mynode;
  // @@protoc_insertion_point(field_set_allocated:ConnectNodeReq.mynode)
}

// -------------------------------------------------------------------

// BroadcastNodeReq

// .NodeInfo mynode = 1;
inline bool BroadcastNodeReq::_internal_has_mynode() const {
  return this != internal_default_instance() && mynode_ != nullptr;
}
inline bool BroadcastNodeReq::has_mynode() const {
  return _internal_has_mynode();
}
inline void BroadcastNodeReq::clear_mynode() {
  if (GetArenaNoVirtual() == nullptr && mynode_ != nullptr) {
    delete mynode_;
  }
  mynode_ = nullptr;
}
inline const ::NodeInfo& BroadcastNodeReq::_internal_mynode() const {
  const ::NodeInfo* p = mynode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeInfo*>(
      &::_NodeInfo_default_instance_);
}
inline const ::NodeInfo& BroadcastNodeReq::mynode() const {
  // @@protoc_insertion_point(field_get:BroadcastNodeReq.mynode)
  return _internal_mynode();
}
inline ::NodeInfo* BroadcastNodeReq::release_mynode() {
  // @@protoc_insertion_point(field_release:BroadcastNodeReq.mynode)
  
  ::NodeInfo* temp = mynode_;
  mynode_ = nullptr;
  return temp;
}
inline ::NodeInfo* BroadcastNodeReq::_internal_mutable_mynode() {
  
  if (mynode_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeInfo>(GetArenaNoVirtual());
    mynode_ = p;
  }
  return mynode_;
}
inline ::NodeInfo* BroadcastNodeReq::mutable_mynode() {
  // @@protoc_insertion_point(field_mutable:BroadcastNodeReq.mynode)
  return _internal_mutable_mynode();
}
inline void BroadcastNodeReq::set_allocated_mynode(::NodeInfo* mynode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mynode_;
  }
  if (mynode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mynode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mynode, submessage_arena);
    }
    
  } else {
    
  }
  mynode_ = mynode;
  // @@protoc_insertion_point(field_set_allocated:BroadcastNodeReq.mynode)
}

// -------------------------------------------------------------------

// TransMsgReq

// .NodeInfo dest = 1;
inline bool TransMsgReq::_internal_has_dest() const {
  return this != internal_default_instance() && dest_ != nullptr;
}
inline bool TransMsgReq::has_dest() const {
  return _internal_has_dest();
}
inline void TransMsgReq::clear_dest() {
  if (GetArenaNoVirtual() == nullptr && dest_ != nullptr) {
    delete dest_;
  }
  dest_ = nullptr;
}
inline const ::NodeInfo& TransMsgReq::_internal_dest() const {
  const ::NodeInfo* p = dest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeInfo*>(
      &::_NodeInfo_default_instance_);
}
inline const ::NodeInfo& TransMsgReq::dest() const {
  // @@protoc_insertion_point(field_get:TransMsgReq.dest)
  return _internal_dest();
}
inline ::NodeInfo* TransMsgReq::release_dest() {
  // @@protoc_insertion_point(field_release:TransMsgReq.dest)
  
  ::NodeInfo* temp = dest_;
  dest_ = nullptr;
  return temp;
}
inline ::NodeInfo* TransMsgReq::_internal_mutable_dest() {
  
  if (dest_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeInfo>(GetArenaNoVirtual());
    dest_ = p;
  }
  return dest_;
}
inline ::NodeInfo* TransMsgReq::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:TransMsgReq.dest)
  return _internal_mutable_dest();
}
inline void TransMsgReq::set_allocated_dest(::NodeInfo* dest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dest_;
  }
  if (dest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest, submessage_arena);
    }
    
  } else {
    
  }
  dest_ = dest;
  // @@protoc_insertion_point(field_set_allocated:TransMsgReq.dest)
}

// bytes data = 2;
inline void TransMsgReq::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgReq::data() const {
  // @@protoc_insertion_point(field_get:TransMsgReq.data)
  return _internal_data();
}
inline void TransMsgReq::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:TransMsgReq.data)
}
inline std::string* TransMsgReq::mutable_data() {
  // @@protoc_insertion_point(field_mutable:TransMsgReq.data)
  return _internal_mutable_data();
}
inline const std::string& TransMsgReq::_internal_data() const {
  return data_.GetNoArena();
}
inline void TransMsgReq::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransMsgReq::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgReq.data)
}
inline void TransMsgReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgReq.data)
}
inline void TransMsgReq::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgReq.data)
}
inline std::string* TransMsgReq::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgReq::release_data() {
  // @@protoc_insertion_point(field_release:TransMsgReq.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:TransMsgReq.data)
}

// uint32 priority = 3;
inline void TransMsgReq::clear_priority() {
  priority_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransMsgReq::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransMsgReq::priority() const {
  // @@protoc_insertion_point(field_get:TransMsgReq.priority)
  return _internal_priority();
}
inline void TransMsgReq::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  priority_ = value;
}
inline void TransMsgReq::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:TransMsgReq.priority)
}

// -------------------------------------------------------------------

// BroadcaseMsgReq

// .NodeInfo from = 1;
inline bool BroadcaseMsgReq::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool BroadcaseMsgReq::has_from() const {
  return _internal_has_from();
}
inline void BroadcaseMsgReq::clear_from() {
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
inline const ::NodeInfo& BroadcaseMsgReq::_internal_from() const {
  const ::NodeInfo* p = from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeInfo*>(
      &::_NodeInfo_default_instance_);
}
inline const ::NodeInfo& BroadcaseMsgReq::from() const {
  // @@protoc_insertion_point(field_get:BroadcaseMsgReq.from)
  return _internal_from();
}
inline ::NodeInfo* BroadcaseMsgReq::release_from() {
  // @@protoc_insertion_point(field_release:BroadcaseMsgReq.from)
  
  ::NodeInfo* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::NodeInfo* BroadcaseMsgReq::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeInfo>(GetArenaNoVirtual());
    from_ = p;
  }
  return from_;
}
inline ::NodeInfo* BroadcaseMsgReq::mutable_from() {
  // @@protoc_insertion_point(field_mutable:BroadcaseMsgReq.from)
  return _internal_mutable_from();
}
inline void BroadcaseMsgReq::set_allocated_from(::NodeInfo* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:BroadcaseMsgReq.from)
}

// bytes data = 2;
inline void BroadcaseMsgReq::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BroadcaseMsgReq::data() const {
  // @@protoc_insertion_point(field_get:BroadcaseMsgReq.data)
  return _internal_data();
}
inline void BroadcaseMsgReq::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:BroadcaseMsgReq.data)
}
inline std::string* BroadcaseMsgReq::mutable_data() {
  // @@protoc_insertion_point(field_mutable:BroadcaseMsgReq.data)
  return _internal_mutable_data();
}
inline const std::string& BroadcaseMsgReq::_internal_data() const {
  return data_.GetNoArena();
}
inline void BroadcaseMsgReq::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BroadcaseMsgReq::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BroadcaseMsgReq.data)
}
inline void BroadcaseMsgReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BroadcaseMsgReq.data)
}
inline void BroadcaseMsgReq::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BroadcaseMsgReq.data)
}
inline std::string* BroadcaseMsgReq::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcaseMsgReq::release_data() {
  // @@protoc_insertion_point(field_release:BroadcaseMsgReq.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcaseMsgReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:BroadcaseMsgReq.data)
}

// uint32 priority = 3;
inline void BroadcaseMsgReq::clear_priority() {
  priority_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BroadcaseMsgReq::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BroadcaseMsgReq::priority() const {
  // @@protoc_insertion_point(field_get:BroadcaseMsgReq.priority)
  return _internal_priority();
}
inline void BroadcaseMsgReq::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  priority_ = value;
}
inline void BroadcaseMsgReq::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:BroadcaseMsgReq.priority)
}

// -------------------------------------------------------------------

// NotifyConnectReq

// .NodeInfo server_node = 1;
inline bool NotifyConnectReq::_internal_has_server_node() const {
  return this != internal_default_instance() && server_node_ != nullptr;
}
inline bool NotifyConnectReq::has_server_node() const {
  return _internal_has_server_node();
}
inline void NotifyConnectReq::clear_server_node() {
  if (GetArenaNoVirtual() == nullptr && server_node_ != nullptr) {
    delete server_node_;
  }
  server_node_ = nullptr;
}
inline const ::NodeInfo& NotifyConnectReq::_internal_server_node() const {
  const ::NodeInfo* p = server_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeInfo*>(
      &::_NodeInfo_default_instance_);
}
inline const ::NodeInfo& NotifyConnectReq::server_node() const {
  // @@protoc_insertion_point(field_get:NotifyConnectReq.server_node)
  return _internal_server_node();
}
inline ::NodeInfo* NotifyConnectReq::release_server_node() {
  // @@protoc_insertion_point(field_release:NotifyConnectReq.server_node)
  
  ::NodeInfo* temp = server_node_;
  server_node_ = nullptr;
  return temp;
}
inline ::NodeInfo* NotifyConnectReq::_internal_mutable_server_node() {
  
  if (server_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeInfo>(GetArenaNoVirtual());
    server_node_ = p;
  }
  return server_node_;
}
inline ::NodeInfo* NotifyConnectReq::mutable_server_node() {
  // @@protoc_insertion_point(field_mutable:NotifyConnectReq.server_node)
  return _internal_mutable_server_node();
}
inline void NotifyConnectReq::set_allocated_server_node(::NodeInfo* server_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_node_;
  }
  if (server_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_node, submessage_arena);
    }
    
  } else {
    
  }
  server_node_ = server_node;
  // @@protoc_insertion_point(field_set_allocated:NotifyConnectReq.server_node)
}

// .NodeInfo client_node = 2;
inline bool NotifyConnectReq::_internal_has_client_node() const {
  return this != internal_default_instance() && client_node_ != nullptr;
}
inline bool NotifyConnectReq::has_client_node() const {
  return _internal_has_client_node();
}
inline void NotifyConnectReq::clear_client_node() {
  if (GetArenaNoVirtual() == nullptr && client_node_ != nullptr) {
    delete client_node_;
  }
  client_node_ = nullptr;
}
inline const ::NodeInfo& NotifyConnectReq::_internal_client_node() const {
  const ::NodeInfo* p = client_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NodeInfo*>(
      &::_NodeInfo_default_instance_);
}
inline const ::NodeInfo& NotifyConnectReq::client_node() const {
  // @@protoc_insertion_point(field_get:NotifyConnectReq.client_node)
  return _internal_client_node();
}
inline ::NodeInfo* NotifyConnectReq::release_client_node() {
  // @@protoc_insertion_point(field_release:NotifyConnectReq.client_node)
  
  ::NodeInfo* temp = client_node_;
  client_node_ = nullptr;
  return temp;
}
inline ::NodeInfo* NotifyConnectReq::_internal_mutable_client_node() {
  
  if (client_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeInfo>(GetArenaNoVirtual());
    client_node_ = p;
  }
  return client_node_;
}
inline ::NodeInfo* NotifyConnectReq::mutable_client_node() {
  // @@protoc_insertion_point(field_mutable:NotifyConnectReq.client_node)
  return _internal_mutable_client_node();
}
inline void NotifyConnectReq::set_allocated_client_node(::NodeInfo* client_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_node_;
  }
  if (client_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_node, submessage_arena);
    }
    
  } else {
    
  }
  client_node_ = client_node;
  // @@protoc_insertion_point(field_set_allocated:NotifyConnectReq.client_node)
}

// -------------------------------------------------------------------

// PingReq

// string id = 1;
inline void PingReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PingReq::id() const {
  // @@protoc_insertion_point(field_get:PingReq.id)
  return _internal_id();
}
inline void PingReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PingReq.id)
}
inline std::string* PingReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:PingReq.id)
  return _internal_mutable_id();
}
inline const std::string& PingReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void PingReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PingReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PingReq.id)
}
inline void PingReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PingReq.id)
}
inline void PingReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PingReq.id)
}
inline std::string* PingReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PingReq::release_id() {
  // @@protoc_insertion_point(field_release:PingReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PingReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:PingReq.id)
}

// -------------------------------------------------------------------

// PongReq

// string id = 1;
inline void PongReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PongReq::id() const {
  // @@protoc_insertion_point(field_get:PongReq.id)
  return _internal_id();
}
inline void PongReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PongReq.id)
}
inline std::string* PongReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:PongReq.id)
  return _internal_mutable_id();
}
inline const std::string& PongReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void PongReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PongReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PongReq.id)
}
inline void PongReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PongReq.id)
}
inline void PongReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PongReq.id)
}
inline std::string* PongReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PongReq::release_id() {
  // @@protoc_insertion_point(field_release:PongReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PongReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:PongReq.id)
}

// uint32 chain_height = 2;
inline void PongReq::clear_chain_height() {
  chain_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PongReq::_internal_chain_height() const {
  return chain_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PongReq::chain_height() const {
  // @@protoc_insertion_point(field_get:PongReq.chain_height)
  return _internal_chain_height();
}
inline void PongReq::_internal_set_chain_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chain_height_ = value;
}
inline void PongReq::set_chain_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chain_height(value);
  // @@protoc_insertion_point(field_set:PongReq.chain_height)
}

// -------------------------------------------------------------------

// EchoReq

// string id = 1;
inline void EchoReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EchoReq::id() const {
  // @@protoc_insertion_point(field_get:EchoReq.id)
  return _internal_id();
}
inline void EchoReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EchoReq.id)
}
inline std::string* EchoReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:EchoReq.id)
  return _internal_mutable_id();
}
inline const std::string& EchoReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void EchoReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EchoReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EchoReq.id)
}
inline void EchoReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EchoReq.id)
}
inline void EchoReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EchoReq.id)
}
inline std::string* EchoReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EchoReq::release_id() {
  // @@protoc_insertion_point(field_release:EchoReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EchoReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:EchoReq.id)
}

// -------------------------------------------------------------------

// EchoAck

// string id = 1;
inline void EchoAck::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EchoAck::id() const {
  // @@protoc_insertion_point(field_get:EchoAck.id)
  return _internal_id();
}
inline void EchoAck::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EchoAck.id)
}
inline std::string* EchoAck::mutable_id() {
  // @@protoc_insertion_point(field_mutable:EchoAck.id)
  return _internal_mutable_id();
}
inline const std::string& EchoAck::_internal_id() const {
  return id_.GetNoArena();
}
inline void EchoAck::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EchoAck::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EchoAck.id)
}
inline void EchoAck::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EchoAck.id)
}
inline void EchoAck::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EchoAck.id)
}
inline std::string* EchoAck::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EchoAck::release_id() {
  // @@protoc_insertion_point(field_release:EchoAck.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EchoAck::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:EchoAck.id)
}

// -------------------------------------------------------------------

// UpdateFeeReq

// string id = 1;
inline void UpdateFeeReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateFeeReq::id() const {
  // @@protoc_insertion_point(field_get:UpdateFeeReq.id)
  return _internal_id();
}
inline void UpdateFeeReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UpdateFeeReq.id)
}
inline std::string* UpdateFeeReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:UpdateFeeReq.id)
  return _internal_mutable_id();
}
inline const std::string& UpdateFeeReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void UpdateFeeReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateFeeReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdateFeeReq.id)
}
inline void UpdateFeeReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdateFeeReq.id)
}
inline void UpdateFeeReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdateFeeReq.id)
}
inline std::string* UpdateFeeReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateFeeReq::release_id() {
  // @@protoc_insertion_point(field_release:UpdateFeeReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFeeReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:UpdateFeeReq.id)
}

// uint64 fee = 2;
inline void UpdateFeeReq::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateFeeReq::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateFeeReq::fee() const {
  // @@protoc_insertion_point(field_get:UpdateFeeReq.fee)
  return _internal_fee();
}
inline void UpdateFeeReq::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void UpdateFeeReq::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:UpdateFeeReq.fee)
}

// -------------------------------------------------------------------

// UpdatePackageFeeReq

// string id = 1;
inline void UpdatePackageFeeReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdatePackageFeeReq::id() const {
  // @@protoc_insertion_point(field_get:UpdatePackageFeeReq.id)
  return _internal_id();
}
inline void UpdatePackageFeeReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UpdatePackageFeeReq.id)
}
inline std::string* UpdatePackageFeeReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:UpdatePackageFeeReq.id)
  return _internal_mutable_id();
}
inline const std::string& UpdatePackageFeeReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void UpdatePackageFeeReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdatePackageFeeReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpdatePackageFeeReq.id)
}
inline void UpdatePackageFeeReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpdatePackageFeeReq.id)
}
inline void UpdatePackageFeeReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpdatePackageFeeReq.id)
}
inline std::string* UpdatePackageFeeReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdatePackageFeeReq::release_id() {
  // @@protoc_insertion_point(field_release:UpdatePackageFeeReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePackageFeeReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:UpdatePackageFeeReq.id)
}

// uint64 package_fee = 2;
inline void UpdatePackageFeeReq::clear_package_fee() {
  package_fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdatePackageFeeReq::_internal_package_fee() const {
  return package_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdatePackageFeeReq::package_fee() const {
  // @@protoc_insertion_point(field_get:UpdatePackageFeeReq.package_fee)
  return _internal_package_fee();
}
inline void UpdatePackageFeeReq::_internal_set_package_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  package_fee_ = value;
}
inline void UpdatePackageFeeReq::set_package_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_package_fee(value);
  // @@protoc_insertion_point(field_set:UpdatePackageFeeReq.package_fee)
}

// -------------------------------------------------------------------

// GetNodeCacheReq

// string id = 1;
inline void GetNodeCacheReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetNodeCacheReq::id() const {
  // @@protoc_insertion_point(field_get:GetNodeCacheReq.id)
  return _internal_id();
}
inline void GetNodeCacheReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GetNodeCacheReq.id)
}
inline std::string* GetNodeCacheReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:GetNodeCacheReq.id)
  return _internal_mutable_id();
}
inline const std::string& GetNodeCacheReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void GetNodeCacheReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodeCacheReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetNodeCacheReq.id)
}
inline void GetNodeCacheReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetNodeCacheReq.id)
}
inline void GetNodeCacheReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetNodeCacheReq.id)
}
inline std::string* GetNodeCacheReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodeCacheReq::release_id() {
  // @@protoc_insertion_point(field_release:GetNodeCacheReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodeCacheReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GetNodeCacheReq.id)
}

// bool is_fetch_public = 2;
inline void GetNodeCacheReq::clear_is_fetch_public() {
  is_fetch_public_ = false;
}
inline bool GetNodeCacheReq::_internal_is_fetch_public() const {
  return is_fetch_public_;
}
inline bool GetNodeCacheReq::is_fetch_public() const {
  // @@protoc_insertion_point(field_get:GetNodeCacheReq.is_fetch_public)
  return _internal_is_fetch_public();
}
inline void GetNodeCacheReq::_internal_set_is_fetch_public(bool value) {
  
  is_fetch_public_ = value;
}
inline void GetNodeCacheReq::set_is_fetch_public(bool value) {
  _internal_set_is_fetch_public(value);
  // @@protoc_insertion_point(field_set:GetNodeCacheReq.is_fetch_public)
}

// uint32 node_height = 3;
inline void GetNodeCacheReq::clear_node_height() {
  node_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetNodeCacheReq::_internal_node_height() const {
  return node_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetNodeCacheReq::node_height() const {
  // @@protoc_insertion_point(field_get:GetNodeCacheReq.node_height)
  return _internal_node_height();
}
inline void GetNodeCacheReq::_internal_set_node_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_height_ = value;
}
inline void GetNodeCacheReq::set_node_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_height(value);
  // @@protoc_insertion_point(field_set:GetNodeCacheReq.node_height)
}

// -------------------------------------------------------------------

// NodeCacheItem

// string base58addr = 1;
inline void NodeCacheItem::clear_base58addr() {
  base58addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeCacheItem::base58addr() const {
  // @@protoc_insertion_point(field_get:NodeCacheItem.base58addr)
  return _internal_base58addr();
}
inline void NodeCacheItem::set_base58addr(const std::string& value) {
  _internal_set_base58addr(value);
  // @@protoc_insertion_point(field_set:NodeCacheItem.base58addr)
}
inline std::string* NodeCacheItem::mutable_base58addr() {
  // @@protoc_insertion_point(field_mutable:NodeCacheItem.base58addr)
  return _internal_mutable_base58addr();
}
inline const std::string& NodeCacheItem::_internal_base58addr() const {
  return base58addr_.GetNoArena();
}
inline void NodeCacheItem::_internal_set_base58addr(const std::string& value) {
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeCacheItem::set_base58addr(std::string&& value) {
  
  base58addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeCacheItem.base58addr)
}
inline void NodeCacheItem::set_base58addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeCacheItem.base58addr)
}
inline void NodeCacheItem::set_base58addr(const char* value, size_t size) {
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeCacheItem.base58addr)
}
inline std::string* NodeCacheItem::_internal_mutable_base58addr() {
  
  return base58addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeCacheItem::release_base58addr() {
  // @@protoc_insertion_point(field_release:NodeCacheItem.base58addr)
  
  return base58addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeCacheItem::set_allocated_base58addr(std::string* base58addr) {
  if (base58addr != nullptr) {
    
  } else {
    
  }
  base58addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base58addr);
  // @@protoc_insertion_point(field_set_allocated:NodeCacheItem.base58addr)
}

// uint32 height = 2;
inline void NodeCacheItem::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeCacheItem::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeCacheItem::height() const {
  // @@protoc_insertion_point(field_get:NodeCacheItem.height)
  return _internal_height();
}
inline void NodeCacheItem::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void NodeCacheItem::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:NodeCacheItem.height)
}

// uint64 fee = 3;
inline void NodeCacheItem::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeCacheItem::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeCacheItem::fee() const {
  // @@protoc_insertion_point(field_get:NodeCacheItem.fee)
  return _internal_fee();
}
inline void NodeCacheItem::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void NodeCacheItem::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:NodeCacheItem.fee)
}

// bool is_public = 4;
inline void NodeCacheItem::clear_is_public() {
  is_public_ = false;
}
inline bool NodeCacheItem::_internal_is_public() const {
  return is_public_;
}
inline bool NodeCacheItem::is_public() const {
  // @@protoc_insertion_point(field_get:NodeCacheItem.is_public)
  return _internal_is_public();
}
inline void NodeCacheItem::_internal_set_is_public(bool value) {
  
  is_public_ = value;
}
inline void NodeCacheItem::set_is_public(bool value) {
  _internal_set_is_public(value);
  // @@protoc_insertion_point(field_set:NodeCacheItem.is_public)
}

// -------------------------------------------------------------------

// GetNodeCacheAck

// repeated .NodeCacheItem nodes_height = 1;
inline int GetNodeCacheAck::_internal_nodes_height_size() const {
  return nodes_height_.size();
}
inline int GetNodeCacheAck::nodes_height_size() const {
  return _internal_nodes_height_size();
}
inline void GetNodeCacheAck::clear_nodes_height() {
  nodes_height_.Clear();
}
inline ::NodeCacheItem* GetNodeCacheAck::mutable_nodes_height(int index) {
  // @@protoc_insertion_point(field_mutable:GetNodeCacheAck.nodes_height)
  return nodes_height_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeCacheItem >*
GetNodeCacheAck::mutable_nodes_height() {
  // @@protoc_insertion_point(field_mutable_list:GetNodeCacheAck.nodes_height)
  return &nodes_height_;
}
inline const ::NodeCacheItem& GetNodeCacheAck::_internal_nodes_height(int index) const {
  return nodes_height_.Get(index);
}
inline const ::NodeCacheItem& GetNodeCacheAck::nodes_height(int index) const {
  // @@protoc_insertion_point(field_get:GetNodeCacheAck.nodes_height)
  return _internal_nodes_height(index);
}
inline ::NodeCacheItem* GetNodeCacheAck::_internal_add_nodes_height() {
  return nodes_height_.Add();
}
inline ::NodeCacheItem* GetNodeCacheAck::add_nodes_height() {
  // @@protoc_insertion_point(field_add:GetNodeCacheAck.nodes_height)
  return _internal_add_nodes_height();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeCacheItem >&
GetNodeCacheAck::nodes_height() const {
  // @@protoc_insertion_point(field_list:GetNodeCacheAck.nodes_height)
  return nodes_height_;
}

// repeated .NodeInfo public_nodes = 2;
inline int GetNodeCacheAck::_internal_public_nodes_size() const {
  return public_nodes_.size();
}
inline int GetNodeCacheAck::public_nodes_size() const {
  return _internal_public_nodes_size();
}
inline void GetNodeCacheAck::clear_public_nodes() {
  public_nodes_.Clear();
}
inline ::NodeInfo* GetNodeCacheAck::mutable_public_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:GetNodeCacheAck.public_nodes)
  return public_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >*
GetNodeCacheAck::mutable_public_nodes() {
  // @@protoc_insertion_point(field_mutable_list:GetNodeCacheAck.public_nodes)
  return &public_nodes_;
}
inline const ::NodeInfo& GetNodeCacheAck::_internal_public_nodes(int index) const {
  return public_nodes_.Get(index);
}
inline const ::NodeInfo& GetNodeCacheAck::public_nodes(int index) const {
  // @@protoc_insertion_point(field_get:GetNodeCacheAck.public_nodes)
  return _internal_public_nodes(index);
}
inline ::NodeInfo* GetNodeCacheAck::_internal_add_public_nodes() {
  return public_nodes_.Add();
}
inline ::NodeInfo* GetNodeCacheAck::add_public_nodes() {
  // @@protoc_insertion_point(field_add:GetNodeCacheAck.public_nodes)
  return _internal_add_public_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfo >&
GetNodeCacheAck::public_nodes() const {
  // @@protoc_insertion_point(field_list:GetNodeCacheAck.public_nodes)
  return public_nodes_;
}

// -------------------------------------------------------------------

// GetTransInfoReq

// string txid = 1;
inline void GetTransInfoReq::clear_txid() {
  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransInfoReq::txid() const {
  // @@protoc_insertion_point(field_get:GetTransInfoReq.txid)
  return _internal_txid();
}
inline void GetTransInfoReq::set_txid(const std::string& value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:GetTransInfoReq.txid)
}
inline std::string* GetTransInfoReq::mutable_txid() {
  // @@protoc_insertion_point(field_mutable:GetTransInfoReq.txid)
  return _internal_mutable_txid();
}
inline const std::string& GetTransInfoReq::_internal_txid() const {
  return txid_.GetNoArena();
}
inline void GetTransInfoReq::_internal_set_txid(const std::string& value) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransInfoReq::set_txid(std::string&& value) {
  
  txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTransInfoReq.txid)
}
inline void GetTransInfoReq::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTransInfoReq.txid)
}
inline void GetTransInfoReq::set_txid(const char* value, size_t size) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTransInfoReq.txid)
}
inline std::string* GetTransInfoReq::_internal_mutable_txid() {
  
  return txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransInfoReq::release_txid() {
  // @@protoc_insertion_point(field_release:GetTransInfoReq.txid)
  
  return txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransInfoReq::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:GetTransInfoReq.txid)
}

// string nodeid = 2;
inline void GetTransInfoReq::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransInfoReq::nodeid() const {
  // @@protoc_insertion_point(field_get:GetTransInfoReq.nodeid)
  return _internal_nodeid();
}
inline void GetTransInfoReq::set_nodeid(const std::string& value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:GetTransInfoReq.nodeid)
}
inline std::string* GetTransInfoReq::mutable_nodeid() {
  // @@protoc_insertion_point(field_mutable:GetTransInfoReq.nodeid)
  return _internal_mutable_nodeid();
}
inline const std::string& GetTransInfoReq::_internal_nodeid() const {
  return nodeid_.GetNoArena();
}
inline void GetTransInfoReq::_internal_set_nodeid(const std::string& value) {
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransInfoReq::set_nodeid(std::string&& value) {
  
  nodeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTransInfoReq.nodeid)
}
inline void GetTransInfoReq::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTransInfoReq.nodeid)
}
inline void GetTransInfoReq::set_nodeid(const char* value, size_t size) {
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTransInfoReq.nodeid)
}
inline std::string* GetTransInfoReq::_internal_mutable_nodeid() {
  
  return nodeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransInfoReq::release_nodeid() {
  // @@protoc_insertion_point(field_release:GetTransInfoReq.nodeid)
  
  return nodeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransInfoReq::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:GetTransInfoReq.nodeid)
}

// -------------------------------------------------------------------

// GetTransInfoAck

// .CTransaction trans = 1;
inline bool GetTransInfoAck::_internal_has_trans() const {
  return this != internal_default_instance() && trans_ != nullptr;
}
inline bool GetTransInfoAck::has_trans() const {
  return _internal_has_trans();
}
inline const ::CTransaction& GetTransInfoAck::_internal_trans() const {
  const ::CTransaction* p = trans_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CTransaction*>(
      &::_CTransaction_default_instance_);
}
inline const ::CTransaction& GetTransInfoAck::trans() const {
  // @@protoc_insertion_point(field_get:GetTransInfoAck.trans)
  return _internal_trans();
}
inline ::CTransaction* GetTransInfoAck::release_trans() {
  // @@protoc_insertion_point(field_release:GetTransInfoAck.trans)
  
  ::CTransaction* temp = trans_;
  trans_ = nullptr;
  return temp;
}
inline ::CTransaction* GetTransInfoAck::_internal_mutable_trans() {
  
  if (trans_ == nullptr) {
    auto* p = CreateMaybeMessage<::CTransaction>(GetArenaNoVirtual());
    trans_ = p;
  }
  return trans_;
}
inline ::CTransaction* GetTransInfoAck::mutable_trans() {
  // @@protoc_insertion_point(field_mutable:GetTransInfoAck.trans)
  return _internal_mutable_trans();
}
inline void GetTransInfoAck::set_allocated_trans(::CTransaction* trans) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trans_);
  }
  if (trans) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trans = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trans, submessage_arena);
    }
    
  } else {
    
  }
  trans_ = trans;
  // @@protoc_insertion_point(field_set_allocated:GetTransInfoAck.trans)
}

// uint32 height = 2;
inline void GetTransInfoAck::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTransInfoAck::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTransInfoAck::height() const {
  // @@protoc_insertion_point(field_get:GetTransInfoAck.height)
  return _internal_height();
}
inline void GetTransInfoAck::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void GetTransInfoAck::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:GetTransInfoAck.height)
}

// -------------------------------------------------------------------

// NodeHeightChangedReq

// string id = 1;
inline void NodeHeightChangedReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeHeightChangedReq::id() const {
  // @@protoc_insertion_point(field_get:NodeHeightChangedReq.id)
  return _internal_id();
}
inline void NodeHeightChangedReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NodeHeightChangedReq.id)
}
inline std::string* NodeHeightChangedReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NodeHeightChangedReq.id)
  return _internal_mutable_id();
}
inline const std::string& NodeHeightChangedReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void NodeHeightChangedReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeHeightChangedReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeHeightChangedReq.id)
}
inline void NodeHeightChangedReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeHeightChangedReq.id)
}
inline void NodeHeightChangedReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeHeightChangedReq.id)
}
inline std::string* NodeHeightChangedReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeHeightChangedReq::release_id() {
  // @@protoc_insertion_point(field_release:NodeHeightChangedReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeHeightChangedReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NodeHeightChangedReq.id)
}

// uint32 height = 2;
inline void NodeHeightChangedReq::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeHeightChangedReq::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeHeightChangedReq::height() const {
  // @@protoc_insertion_point(field_get:NodeHeightChangedReq.height)
  return _internal_height();
}
inline void NodeHeightChangedReq::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void NodeHeightChangedReq::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:NodeHeightChangedReq.height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_2eproto
